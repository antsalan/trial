{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"people_counter_client.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nBus Passenger Counter Client\n\nThis script extends the existing people_counter.py logic to work as a ground script\nfor the bus monitoring system. It can work with both video files (simulation) and\nwebcam/RTSP streams (live mode).\n\"\"\"\n\nfrom tracker.centroidtracker import CentroidTracker\nfrom tracker.trackableobject import TrackableObject\nfrom utils.thread import ThreadingClass\nfrom utils.mailer import Mailer\nimport numpy as np\nimport argparse\nimport datetime\nimport imutils\nimport time\nimport cv2\nimport json\nimport requests\nimport threading\nimport logging\n\n# Setup logging\nlogging.basicConfig(level=logging.INFO, format=\"[INFO] %(message)s\")\nlogger = logging.getLogger(__name__)\n\n# Default configuration\nDEFAULT_CONFIG = {\n    \"server_url\": \"http://localhost:5000\",\n    \"update_interval\": 5,  # seconds\n    \"confidence\": 0.4,\n    \"skip_frames\": 30,\n    \"max_disappeared\": 50,\n    \"max_distance\": 50,\n    \"alert_threshold\": 35,\n    \"capacity\": 40\n}\n\nclass PeopleCounterClient:\n    def __init__(self, bus_id, config=None):\n        self.bus_id = bus_id\n        self.config = config or DEFAULT_CONFIG\n        \n        # Initialize tracking\n        self.ct = CentroidTracker(\n            maxDisappeared=self.config[\"max_disappeared\"], \n            maxDistance=self.config[\"max_distance\"]\n        )\n        self.trackers = []\n        self.trackable_objects = {}\n        \n        # Counters\n        self.total_frames = 0\n        self.total_down = 0  # entering\n        self.total_up = 0    # exiting\n        \n        # Data for server updates\n        self.move_in = []\n        self.move_out = []\n        self.in_time = []\n        self.out_time = []\n        \n        # Load MobileNet SSD\n        self.load_model()\n        \n        # Start update thread\n        self.running = True\n        self.update_thread = threading.Thread(target=self.update_server_loop)\n        self.update_thread.daemon = True\n        self.update_thread.start()\n    \n    def load_model(self):\n        \"\"\"Load the MobileNet SSD model\"\"\"\n        try:\n            prototxt_path = \"MobileNetSSD_deploy.prototxt\"\n            model_path = self.config.get(\"model_path\", \"MobileNetSSD_deploy.caffemodel\")\n            \n            self.net = cv2.dnn.readNetFromCaffe(prototxt_path, model_path)\n            logger.info(f\"Model loaded successfully for bus {self.bus_id}\")\n            \n            # Class labels\n            self.CLASSES = [\n                \"background\", \"aeroplane\", \"bicycle\", \"bird\", \"boat\",\n                \"bottle\", \"bus\", \"car\", \"cat\", \"chair\", \"cow\", \"diningtable\",\n                \"dog\", \"horse\", \"motorbike\", \"person\", \"pottedplant\", \"sheep\",\n                \"sofa\", \"train\", \"tvmonitor\"\n            ]\n        except Exception as e:\n            logger.error(f\"Failed to load model: {e}\")\n            raise\n    \n    def update_server_loop(self):\n        \"\"\"Background thread to send updates to server\"\"\"\n        while self.running:\n            time.sleep(self.config[\"update_interval\"])\n            if self.running:\n                self.send_update_to_server()\n    \n    def send_update_to_server(self):\n        \"\"\"Send passenger count update to the server\"\"\"\n        try:\n            current_passengers = len(self.move_in) - len(self.move_out)\n            current_passengers = max(0, current_passengers)  # Ensure non-negative\n            \n            data = {\n                \"busId\": self.bus_id,\n                \"currentPassengers\": current_passengers,\n                \"passengersIn\": len(self.move_in),\n                \"passengersOut\": len(self.move_out),\n                \"location\": f\"Live tracking - {datetime.datetime.now().strftime('%H:%M:%S')}\"\n            }\n            \n            response = requests.post(\n                f\"{self.config['server_url']}/api/passenger-data\",\n                json=data,\n                timeout=10\n            )\n            \n            if response.status_code == 200:\n                logger.info(f\"Update sent successfully for {self.bus_id}: {current_passengers} passengers\")\n            else:\n                logger.error(f\"Failed to send update: {response.status_code}\")\n                \n        except Exception as e:\n            logger.error(f\"Error sending update to server: {e}\")\n    \n    def process_video(self, input_path=None):\n        \"\"\"Process video input (file or webcam/RTSP)\"\"\"\n        if input_path:\n            logger.info(f\"Starting video file processing: {input_path}\")\n            vs = cv2.VideoCapture(input_path)\n        else:\n            logger.info(\"Starting live camera feed\")\n            vs = cv2.VideoCapture(0)  # Default webcam\n        \n        # Initialize video writer\n        writer = None\n        W = None\n        H = None\n        \n        try:\n            while True:\n                ret, frame = vs.read()\n                if not ret:\n                    if input_path:\n                        logger.info(\"End of video file reached\")\n                        break\n                    else:\n                        continue\n                \n                # Resize frame\n                frame = imutils.resize(frame, width=500)\n                rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n                \n                if W is None or H is None:\n                    (H, W) = frame.shape[:2]\n                \n                # Initialize status and rectangles\n                status = \"Waiting\"\n                rects = []\n                \n                # Run detection every N frames\n                if self.total_frames % self.config[\"skip_frames\"] == 0:\n                    status = \"Detecting\"\n                    self.trackers = []\n                    \n                    # Create blob and run inference\n                    blob = cv2.dnn.blobFromImage(frame, 0.007843, (W, H), 127.5)\n                    self.net.setInput(blob)\n                    detections = self.net.forward()\n                    \n                    # Process detections\n                    for i in np.arange(0, detections.shape[2]):\n                        confidence = detections[0, 0, i, 2]\n                        \n                        if confidence > self.config[\"confidence\"]:\n                            idx = int(detections[0, 0, i, 1])\n                            \n                            # Only process person detections\n                            if self.CLASSES[idx] != \"person\":\n                                continue\n                            \n                            # Extract bounding box\n                            box = detections[0, 0, i, 3:7] * np.array([W, H, W, H])\n                            (startX, startY, endX, endY) = box.astype(\"int\")\n                            \n                            # Create tracker\n                            import dlib\n                            tracker = dlib.correlation_tracker()\n                            rect = dlib.rectangle(startX, startY, endX, endY)\n                            tracker.start_track(rgb, rect)\n                            self.trackers.append(tracker)\n                \n                else:\n                    # Use existing trackers\n                    for tracker in self.trackers:\n                        status = \"Tracking\"\n                        tracker.update(rgb)\n                        pos = tracker.get_position()\n                        \n                        startX = int(pos.left())\n                        startY = int(pos.top())\n                        endX = int(pos.right())\n                        endY = int(pos.bottom())\n                        \n                        rects.append((startX, startY, endX, endY))\n                \n                # Draw counting line\n                cv2.line(frame, (0, H // 2), (W, H // 2), (0, 255, 255), 2)\n                cv2.putText(frame, f\"Bus {self.bus_id} - Entry/Exit Line\", \n                           (10, H - 20), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 255), 2)\n                \n                # Update centroid tracker\n                objects = self.ct.update(rects)\n                \n                # Process tracked objects\n                for (objectID, centroid) in objects.items():\n                    to = self.trackable_objects.get(objectID, None)\n                    \n                    if to is None:\n                        to = TrackableObject(objectID, centroid)\n                    else:\n                        # Determine direction\n                        y = [c[1] for c in to.centroids]\n                        direction = centroid[1] - np.mean(y)\n                        to.centroids.append(centroid)\n                        \n                        if not to.counted:\n                            # Exiting (moving up)\n                            if direction < 0 and centroid[1] < H // 2:\n                                self.total_up += 1\n                                date_time = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M\")\n                                self.move_out.append(self.total_up)\n                                self.out_time.append(date_time)\n                                to.counted = True\n                                logger.info(f\"Passenger exited - Total exits: {self.total_up}\")\n                            \n                            # Entering (moving down)\n                            elif direction > 0 and centroid[1] > H // 2:\n                                self.total_down += 1\n                                date_time = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M\")\n                                self.move_in.append(self.total_down)\n                                self.in_time.append(date_time)\n                                to.counted = True\n                                logger.info(f\"Passenger entered - Total entries: {self.total_down}\")\n                    \n                    self.trackable_objects[objectID] = to\n                    \n                    # Draw tracking info\n                    text = f\"ID {objectID}\"\n                    cv2.putText(frame, text, (centroid[0] - 10, centroid[1] - 10),\n                               cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)\n                    cv2.circle(frame, (centroid[0], centroid[1]), 4, (0, 255, 0), -1)\n                \n                # Display info\n                current_passengers = len(self.move_in) - len(self.move_out)\n                current_passengers = max(0, current_passengers)\n                \n                info = [\n                    (f\"Bus ID\", self.bus_id),\n                    (\"Entries\", self.total_down),\n                    (\"Exits\", self.total_up),\n                    (\"Current\", current_passengers),\n                    (\"Status\", status),\n                ]\n                \n                for (i, (k, v)) in enumerate(info):\n                    text = f\"{k}: {v}\"\n                    cv2.putText(frame, text, (10, H - ((i * 20) + 60)),\n                               cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)\n                \n                # Show frame\n                cv2.imshow(f\"Bus {self.bus_id} - Passenger Counter\", frame)\n                \n                key = cv2.waitKey(1) & 0xFF\n                if key == ord(\"q\"):\n                    break\n                \n                self.total_frames += 1\n        \n        finally:\n            self.running = False\n            vs.release()\n            cv2.destroyAllWindows()\n            logger.info(f\"Processing completed for bus {self.bus_id}\")\n\ndef parse_arguments():\n    parser = argparse.ArgumentParser(description=\"Bus Passenger Counter Client\")\n    parser.add_argument(\"--bus_id\", required=True, help=\"Unique bus/station ID\")\n    parser.add_argument(\"--input\", type=str, help=\"Path to input video file (optional)\")\n    parser.add_argument(\"--server_url\", default=\"http://localhost:5000\", \n                       help=\"Server URL for data transmission\")\n    parser.add_argument(\"--config\", type=str, help=\"Path to configuration file\")\n    parser.add_argument(\"--model\", required=True, help=\"Path to MobileNet SSD model file\")\n    parser.add_argument(\"--confidence\", type=float, default=0.4,\n                       help=\"Minimum probability to filter weak detections\")\n    parser.add_argument(\"--update_interval\", type=int, default=5,\n                       help=\"Update interval in seconds\")\n    \n    return parser.parse_args()\n\ndef load_config(config_path):\n    \"\"\"Load configuration from JSON file\"\"\"\n    try:\n        with open(config_path, 'r') as f:\n            return json.load(f)\n    except Exception as e:\n        logger.error(f\"Failed to load config: {e}\")\n        return DEFAULT_CONFIG\n\ndef main():\n    args = parse_arguments()\n    \n    # Load configuration\n    config = DEFAULT_CONFIG.copy()\n    if args.config:\n        file_config = load_config(args.config)\n        config.update(file_config)\n    \n    # Override with command line arguments\n    config.update({\n        \"server_url\": args.server_url,\n        \"confidence\": args.confidence,\n        \"update_interval\": args.update_interval,\n        \"model_path\": args.model\n    })\n    \n    logger.info(f\"Starting passenger counter for bus: {args.bus_id}\")\n    logger.info(f\"Server URL: {config['server_url']}\")\n    logger.info(f\"Update interval: {config['update_interval']} seconds\")\n    \n    if args.input:\n        logger.info(f\"Using video file: {args.input}\")\n    else:\n        logger.info(\"Using live camera feed\")\n    \n    # Create and run counter\n    counter = PeopleCounterClient(args.bus_id, config)\n    \n    try:\n        counter.process_video(args.input)\n    except KeyboardInterrupt:\n        logger.info(\"Shutting down...\")\n    except Exception as e:\n        logger.error(f\"Error during processing: {e}\")\n    finally:\n        counter.running = False\n\nif __name__ == \"__main__\":\n    main()\n","size_bytes":13745},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Bus Passenger Monitoring System\n\n## Overview\n\nThis is a comprehensive bus passenger monitoring system that combines real-time passenger counting with a web-based dashboard for fleet management. The system uses computer vision for passenger detection and tracking, with a full-stack web application for monitoring multiple buses, stations, and generating alerts when capacity thresholds are exceeded.\n\nThe project consists of a Python-based passenger counting client that processes video feeds (live or recorded) and communicates with a Node.js/Express backend that serves a React dashboard for real-time monitoring and management.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent design\n- **Styling**: Tailwind CSS with CSS variables for theming and responsive design\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Real-time Communication**: WebSocket connection for live updates from the backend\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for type safety across the stack\n- **API Design**: RESTful API with WebSocket support for real-time features\n- **Data Storage**: In-memory storage implementation with interface for future database integration\n- **Session Management**: Express session handling with PostgreSQL session store configuration\n- **Development**: Vite integration for SSR and hot module replacement in development\n\n### Database Schema\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Tables**: \n  - `buses` - Bus information, capacity, current passengers, status, and location\n  - `stations` - Station data with waiting passenger counts\n  - `passenger_data` - Historical passenger in/out data per bus/station\n  - `alerts` - System alerts with severity levels and read status\n  - `activity_log` - System activity tracking for audit trails\n- **Validation**: Zod schemas for runtime type checking and API validation\n\n### Computer Vision Components\n- **Object Detection**: Uses pre-trained models for person detection in video streams\n- **Tracking**: Centroid-based object tracking to follow passengers across frames\n- **Counting Logic**: Direction-based counting for passengers entering/exiting buses\n- **Threading**: Multi-threaded video processing to reduce frame lag and improve performance\n\n### Real-time Features\n- **WebSocket Server**: Broadcasts live updates for passenger counts, alerts, and system status\n- **Auto-refresh**: Dashboard components automatically update with new data\n- **Alert System**: Configurable thresholds trigger alerts for capacity management\n- **Activity Logging**: All system events are logged for monitoring and debugging\n\n### Configuration Management\n- **Environment Variables**: Database connections and email settings via environment variables\n- **JSON Configuration**: Passenger counter settings including thresholds, confidence levels, and server endpoints\n- **Component Configuration**: shadcn/ui configuration for consistent component styling and imports\n\n## External Dependencies\n\n### Backend Services\n- **Neon Database**: PostgreSQL-compatible serverless database (@neondatabase/serverless)\n- **Email Service**: SMTP email alerts via Gmail for capacity warnings\n- **WebSocket**: ws library for real-time client-server communication\n\n### Computer Vision Libraries\n- **OpenCV**: Video processing and computer vision operations\n- **NumPy**: Numerical operations for image processing\n- **SciPy**: Spatial distance calculations for object tracking\n- **imutils**: Image processing utilities and video stream handling\n\n### Frontend Libraries\n- **React Query**: Server state management and caching (@tanstack/react-query)\n- **Radix UI**: Accessible component primitives for consistent UI\n- **Lucide Icons**: Icon library for dashboard interface\n- **Date-fns**: Date manipulation and formatting utilities\n\n### Development Tools\n- **TypeScript**: Type checking across frontend, backend, and shared code\n- **Vite**: Build tool and development server with HMR\n- **Drizzle Kit**: Database migrations and schema management\n- **ESBuild**: Fast JavaScript bundler for production builds","size_bytes":4438},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"attached_assets/centroidtracker_1757778653809.py":{"content":"# import the necessary packages\nfrom scipy.spatial import distance as dist\nfrom collections import OrderedDict\nimport numpy as np\n\nclass CentroidTracker:\n\tdef __init__(self, maxDisappeared=50, maxDistance=50):\n\t\t# initialize the next unique object ID along with two ordered\n\t\t# dictionaries used to keep track of mapping a given object\n\t\t# ID to its centroid and number of consecutive frames it has\n\t\t# been marked as \"disappeared\", respectively\n\t\tself.nextObjectID = 0\n\t\tself.objects = OrderedDict()\n\t\tself.disappeared = OrderedDict()\n\n\t\t# store the number of maximum consecutive frames a given\n\t\t# object is allowed to be marked as \"disappeared\" until we\n\t\t# need to deregister the object from tracking\n\t\tself.maxDisappeared = maxDisappeared\n\n\t\t# store the maximum distance between centroids to associate\n\t\t# an object -- if the distance is larger than this maximum\n\t\t# distance we'll start to mark the object as \"disappeared\"\n\t\tself.maxDistance = maxDistance\n\n\tdef register(self, centroid):\n\t\t# when registering an object we use the next available object\n\t\t# ID to store the centroid\n\t\tself.objects[self.nextObjectID] = centroid\n\t\tself.disappeared[self.nextObjectID] = 0\n\t\tself.nextObjectID += 1\n\n\tdef deregister(self, objectID):\n\t\t# to deregister an object ID we delete the object ID from\n\t\t# both of our respective dictionaries\n\t\tdel self.objects[objectID]\n\t\tdel self.disappeared[objectID]\n\n\tdef update(self, rects):\n\t\t# check to see if the list of input bounding box rectangles\n\t\t# is empty\n\t\tif len(rects) == 0:\n\t\t\t# loop over any existing tracked objects and mark them\n\t\t\t# as disappeared\n\t\t\tfor objectID in list(self.disappeared.keys()):\n\t\t\t\tself.disappeared[objectID] += 1\n\n\t\t\t\t# if we have reached a maximum number of consecutive\n\t\t\t\t# frames where a given object has been marked as\n\t\t\t\t# missing, deregister it\n\t\t\t\tif self.disappeared[objectID] > self.maxDisappeared:\n\t\t\t\t\tself.deregister(objectID)\n\n\t\t\t# return early as there are no centroids or tracking info\n\t\t\t# to update\n\t\t\treturn self.objects\n\n\t\t# initialize an array of input centroids for the current frame\n\t\tinputCentroids = np.zeros((len(rects), 2), dtype=\"int\")\n\n\t\t# loop over the bounding box rectangles\n\t\tfor (i, (startX, startY, endX, endY)) in enumerate(rects):\n\t\t\t# use the bounding box coordinates to derive the centroid\n\t\t\tcX = int((startX + endX) / 2.0)\n\t\t\tcY = int((startY + endY) / 2.0)\n\t\t\tinputCentroids[i] = (cX, cY)\n\n\t\t# if we are currently not tracking any objects take the input\n\t\t# centroids and register each of them\n\t\tif len(self.objects) == 0:\n\t\t\tfor i in range(0, len(inputCentroids)):\n\t\t\t\tself.register(inputCentroids[i])\n\n\t\t# otherwise, are are currently tracking objects so we need to\n\t\t# try to match the input centroids to existing object\n\t\t# centroids\n\t\telse:\n\t\t\t# grab the set of object IDs and corresponding centroids\n\t\t\tobjectIDs = list(self.objects.keys())\n\t\t\tobjectCentroids = list(self.objects.values())\n\n\t\t\t# compute the distance between each pair of object\n\t\t\t# centroids and input centroids, respectively -- our\n\t\t\t# goal will be to match an input centroid to an existing\n\t\t\t# object centroid\n\t\t\tD = dist.cdist(np.array(objectCentroids), inputCentroids)\n\n\t\t\t# in order to perform this matching we must (1) find the\n\t\t\t# smallest value in each row and then (2) sort the row\n\t\t\t# indexes based on their minimum values so that the row\n\t\t\t# with the smallest value as at the *front* of the index\n\t\t\t# list\n\t\t\trows = D.min(axis=1).argsort()\n\n\t\t\t# next, we perform a similar process on the columns by\n\t\t\t# finding the smallest value in each column and then\n\t\t\t# sorting using the previously computed row index list\n\t\t\tcols = D.argmin(axis=1)[rows]\n\n\t\t\t# in order to determine if we need to update, register,\n\t\t\t# or deregister an object we need to keep track of which\n\t\t\t# of the rows and column indexes we have already examined\n\t\t\tusedRows = set()\n\t\t\tusedCols = set()\n\n\t\t\t# loop over the combination of the (row, column) index\n\t\t\t# tuples\n\t\t\tfor (row, col) in zip(rows, cols):\n\t\t\t\t# if we have already examined either the row or\n\t\t\t\t# column value before, ignore it\n\t\t\t\tif row in usedRows or col in usedCols:\n\t\t\t\t\tcontinue\n\n\t\t\t\t# if the distance between centroids is greater than\n\t\t\t\t# the maximum distance, do not associate the two\n\t\t\t\t# centroids to the same object\n\t\t\t\tif D[row, col] > self.maxDistance:\n\t\t\t\t\tcontinue\n\n\t\t\t\t# otherwise, grab the object ID for the current row,\n\t\t\t\t# set its new centroid, and reset the disappeared\n\t\t\t\t# counter\n\t\t\t\tobjectID = objectIDs[row]\n\t\t\t\tself.objects[objectID] = inputCentroids[col]\n\t\t\t\tself.disappeared[objectID] = 0\n\n\t\t\t\t# indicate that we have examined each of the row and\n\t\t\t\t# column indexes, respectively\n\t\t\t\tusedRows.add(row)\n\t\t\t\tusedCols.add(col)\n\n\t\t\t# compute both the row and column index we have NOT yet\n\t\t\t# examined\n\t\t\tunusedRows = set(range(0, D.shape[0])).difference(usedRows)\n\t\t\tunusedCols = set(range(0, D.shape[1])).difference(usedCols)\n\n\t\t\t# in the event that the number of object centroids is\n\t\t\t# equal or greater than the number of input centroids\n\t\t\t# we need to check and see if some of these objects have\n\t\t\t# potentially disappeared\n\t\t\tif D.shape[0] >= D.shape[1]:\n\t\t\t\t# loop over the unused row indexes\n\t\t\t\tfor row in unusedRows:\n\t\t\t\t\t# grab the object ID for the corresponding row\n\t\t\t\t\t# index and increment the disappeared counter\n\t\t\t\t\tobjectID = objectIDs[row]\n\t\t\t\t\tself.disappeared[objectID] += 1\n\n\t\t\t\t\t# check to see if the number of consecutive\n\t\t\t\t\t# frames the object has been marked \"disappeared\"\n\t\t\t\t\t# for warrants deregistering the object\n\t\t\t\t\tif self.disappeared[objectID] > self.maxDisappeared:\n\t\t\t\t\t\tself.deregister(objectID)\n\n\t\t\t# otherwise, if the number of input centroids is greater\n\t\t\t# than the number of existing object centroids we need to\n\t\t\t# register each new input centroid as a trackable object\n\t\t\telse:\n\t\t\t\tfor col in unusedCols:\n\t\t\t\t\tself.register(inputCentroids[col])\n\n\t\t# return the set of trackable objects\n\t\treturn self.objects","size_bytes":5934},"attached_assets/mailer_1757778534870.py":{"content":"import smtplib\nimport json\n\n# initiate features config.\nwith open(\"utils/config.json\", \"r\") as file:\n    config = json.load(file)\n\nclass Mailer:\n    \"\"\" Class to initiate the email alert function. \"\"\"\n\n    def __init__(self):\n        self.email = config[\"Email_Send\"]\n        self.password = config[\"Email_Password\"]\n        self.port = 465\n        self.server = smtplib.SMTP_SSL('smtp.gmail.com', self.port)\n\n    def send(self, mail):\n        self.server = smtplib.SMTP_SSL('smtp.gmail.com', self.port)\n        self.server.login(self.email, self.password)\n        # message to be sent\n        SUBJECT = 'ALERT!'\n        TEXT = f'People limit exceeded in your building!'\n        message = 'Subject: {}\\n\\n{}'.format(SUBJECT, TEXT)\n        # send the mail\n        self.server.sendmail(self.email, mail, message)\n        self.server.quit()\n","size_bytes":838},"attached_assets/people_counter_1757778491670.py":{"content":"from tracker.centroidtracker import CentroidTracker\nfrom tracker.trackableobject import TrackableObject\nfrom imutils.video import VideoStream\nfrom itertools import zip_longest\nfrom utils.mailer import Mailer\nfrom imutils.video import FPS\nfrom utils import thread\nimport numpy as np\nimport threading\nimport argparse\nimport datetime\nimport schedule\nimport logging\nimport imutils\nimport time\nimport dlib\nimport json\nimport csv\nimport cv2\n\n# execution start time\nstart_time = time.time()\n# setup logger\nlogging.basicConfig(level = logging.INFO, format = \"[INFO] %(message)s\")\nlogger = logging.getLogger(__name__)\n# initiate features config.\nwith open(\"utils/config.json\", \"r\") as file:\n    config = json.load(file)\n\ndef parse_arguments():\n\t# function to parse the arguments\n    ap = argparse.ArgumentParser()\n    ap.add_argument(\"-p\", \"--prototxt\", required=False,\n        help=\"path to Caffe 'deploy' prototxt file\")\n    ap.add_argument(\"-m\", \"--model\", required=True,\n        help=\"path to Caffe pre-trained model\")\n    ap.add_argument(\"-i\", \"--input\", type=str,\n        help=\"path to optional input video file\")\n    ap.add_argument(\"-o\", \"--output\", type=str,\n        help=\"path to optional output video file\")\n    # confidence default 0.4\n    ap.add_argument(\"-c\", \"--confidence\", type=float, default=0.4,\n        help=\"minimum probability to filter weak detections\")\n    ap.add_argument(\"-s\", \"--skip-frames\", type=int, default=30,\n        help=\"# of skip frames between detections\")\n    args = vars(ap.parse_args())\n    return args\n\ndef send_mail():\n\t# function to send the email alerts\n\tMailer().send(config[\"Email_Receive\"])\n\ndef log_data(move_in, in_time, move_out, out_time):\n\t# function to log the counting data\n\tdata = [move_in, in_time, move_out, out_time]\n\t# transpose the data to align the columns properly\n\texport_data = zip_longest(*data, fillvalue = '')\n\n\twith open('utils/data/logs/counting_data.csv', 'w', newline = '') as myfile:\n\t\twr = csv.writer(myfile, quoting = csv.QUOTE_ALL)\n\t\tif myfile.tell() == 0: # check if header rows are already existing\n\t\t\twr.writerow((\"Move In\", \"In Time\", \"Move Out\", \"Out Time\"))\n\t\t\twr.writerows(export_data)\n\ndef people_counter():\n\t# main function for people_counter.py\n\targs = parse_arguments()\n\t# initialize the list of class labels MobileNet SSD was trained to detect\n\tCLASSES = [\"background\", \"aeroplane\", \"bicycle\", \"bird\", \"boat\",\n\t\t\"bottle\", \"bus\", \"car\", \"cat\", \"chair\", \"cow\", \"diningtable\",\n\t\t\"dog\", \"horse\", \"motorbike\", \"person\", \"pottedplant\", \"sheep\",\n\t\t\"sofa\", \"train\", \"tvmonitor\"]\n\n\t# load our serialized model from disk\n\tnet = cv2.dnn.readNetFromCaffe(args[\"prototxt\"], args[\"model\"])\n\n\t# if a video path was not supplied, grab a reference to the ip camera\n\tif not args.get(\"input\", False):\n\t\tlogger.info(\"Starting the live stream..\")\n\t\tvs = VideoStream(config[\"url\"]).start()\n\t\ttime.sleep(2.0)\n\n\t# otherwise, grab a reference to the video file\n\telse:\n\t\tlogger.info(\"Starting the video..\")\n\t\tvs = cv2.VideoCapture(args[\"input\"])\n\n\t# initialize the video writer (we'll instantiate later if need be)\n\twriter = None\n\n\t# initialize the frame dimensions (we'll set them as soon as we read\n\t# the first frame from the video)\n\tW = None\n\tH = None\n\n\t# instantiate our centroid tracker, then initialize a list to store\n\t# each of our dlib correlation trackers, followed by a dictionary to\n\t# map each unique object ID to a TrackableObject\n\tct = CentroidTracker(maxDisappeared=40, maxDistance=50)\n\ttrackers = []\n\ttrackableObjects = {}\n\n\t# initialize the total number of frames processed thus far, along\n\t# with the total number of objects that have moved either up or down\n\ttotalFrames = 0\n\ttotalDown = 0\n\ttotalUp = 0\n\t# initialize empty lists to store the counting data\n\ttotal = []\n\tmove_out = []\n\tmove_in =[]\n\tout_time = []\n\tin_time = []\n\n\t# start the frames per second throughput estimator\n\tfps = FPS().start()\n\n\tif config[\"Thread\"]:\n\t\tvs = thread.ThreadingClass(config[\"url\"])\n\n\t# loop over frames from the video stream\n\twhile True:\n\t\t# grab the next frame and handle if we are reading from either\n\t\t# VideoCapture or VideoStream\n\t\tframe = vs.read()\n\t\tframe = frame[1] if args.get(\"input\", False) else frame\n\n\t\t# if we are viewing a video and we did not grab a frame then we\n\t\t# have reached the end of the video\n\t\tif args[\"input\"] is not None and frame is None:\n\t\t\tbreak\n\n\t\t# resize the frame to have a maximum width of 500 pixels (the\n\t\t# less data we have, the faster we can process it), then convert\n\t\t# the frame from BGR to RGB for dlib\n\t\tframe = imutils.resize(frame, width = 500)\n\t\trgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n\n\t\t# if the frame dimensions are empty, set them\n\t\tif W is None or H is None:\n\t\t\t(H, W) = frame.shape[:2]\n\n\t\t# if we are supposed to be writing a video to disk, initialize\n\t\t# the writer\n\t\tif args[\"output\"] is not None and writer is None:\n\t\t\tfourcc = cv2.VideoWriter_fourcc(*\"mp4v\")\n\t\t\twriter = cv2.VideoWriter(args[\"output\"], fourcc, 30,\n\t\t\t\t(W, H), True)\n\n\t\t# initialize the current status along with our list of bounding\n\t\t# box rectangles returned by either (1) our object detector or\n\t\t# (2) the correlation trackers\n\t\tstatus = \"Waiting\"\n\t\trects = []\n\n\t\t# check to see if we should run a more computationally expensive\n\t\t# object detection method to aid our tracker\n\t\tif totalFrames % args[\"skip_frames\"] == 0:\n\t\t\t# set the status and initialize our new set of object trackers\n\t\t\tstatus = \"Detecting\"\n\t\t\ttrackers = []\n\n\t\t\t# convert the frame to a blob and pass the blob through the\n\t\t\t# network and obtain the detections\n\t\t\tblob = cv2.dnn.blobFromImage(frame, 0.007843, (W, H), 127.5)\n\t\t\tnet.setInput(blob)\n\t\t\tdetections = net.forward()\n\n\t\t\t# loop over the detections\n\t\t\tfor i in np.arange(0, detections.shape[2]):\n\t\t\t\t# extract the confidence (i.e., probability) associated\n\t\t\t\t# with the prediction\n\t\t\t\tconfidence = detections[0, 0, i, 2]\n\n\t\t\t\t# filter out weak detections by requiring a minimum\n\t\t\t\t# confidence\n\t\t\t\tif confidence > args[\"confidence\"]:\n\t\t\t\t\t# extract the index of the class label from the\n\t\t\t\t\t# detections list\n\t\t\t\t\tidx = int(detections[0, 0, i, 1])\n\n\t\t\t\t\t# if the class label is not a person, ignore it\n\t\t\t\t\tif CLASSES[idx] != \"person\":\n\t\t\t\t\t\tcontinue\n\n\t\t\t\t\t# compute the (x, y)-coordinates of the bounding box\n\t\t\t\t\t# for the object\n\t\t\t\t\tbox = detections[0, 0, i, 3:7] * np.array([W, H, W, H])\n\t\t\t\t\t(startX, startY, endX, endY) = box.astype(\"int\")\n\n\t\t\t\t\t# construct a dlib rectangle object from the bounding\n\t\t\t\t\t# box coordinates and then start the dlib correlation\n\t\t\t\t\t# tracker\n\t\t\t\t\ttracker = dlib.correlation_tracker()\n\t\t\t\t\trect = dlib.rectangle(startX, startY, endX, endY)\n\t\t\t\t\ttracker.start_track(rgb, rect)\n\n\t\t\t\t\t# add the tracker to our list of trackers so we can\n\t\t\t\t\t# utilize it during skip frames\n\t\t\t\t\ttrackers.append(tracker)\n\n\t\t# otherwise, we should utilize our object *trackers* rather than\n\t\t# object *detectors* to obtain a higher frame processing throughput\n\t\telse:\n\t\t\t# loop over the trackers\n\t\t\tfor tracker in trackers:\n\t\t\t\t# set the status of our system to be 'tracking' rather\n\t\t\t\t# than 'waiting' or 'detecting'\n\t\t\t\tstatus = \"Tracking\"\n\n\t\t\t\t# update the tracker and grab the updated position\n\t\t\t\ttracker.update(rgb)\n\t\t\t\tpos = tracker.get_position()\n\n\t\t\t\t# unpack the position object\n\t\t\t\tstartX = int(pos.left())\n\t\t\t\tstartY = int(pos.top())\n\t\t\t\tendX = int(pos.right())\n\t\t\t\tendY = int(pos.bottom())\n\n\t\t\t\t# add the bounding box coordinates to the rectangles list\n\t\t\t\trects.append((startX, startY, endX, endY))\n\n\t\t# draw a horizontal line in the center of the frame -- once an\n\t\t# object crosses this line we will determine whether they were\n\t\t# moving 'up' or 'down'\n\t\tcv2.line(frame, (0, H // 2), (W, H // 2), (0, 0, 0), 3)\n\t\tcv2.putText(frame, \"-Prediction border - Entrance-\", (10, H - ((i * 20) + 200)),\n\t\t\tcv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1)\n\n\t\t# use the centroid tracker to associate the (1) old object\n\t\t# centroids with (2) the newly computed object centroids\n\t\tobjects = ct.update(rects)\n\n\t\t# loop over the tracked objects\n\t\tfor (objectID, centroid) in objects.items():\n\t\t\t# check to see if a trackable object exists for the current\n\t\t\t# object ID\n\t\t\tto = trackableObjects.get(objectID, None)\n\n\t\t\t# if there is no existing trackable object, create one\n\t\t\tif to is None:\n\t\t\t\tto = TrackableObject(objectID, centroid)\n\n\t\t\t# otherwise, there is a trackable object so we can utilize it\n\t\t\t# to determine direction\n\t\t\telse:\n\t\t\t\t# the difference between the y-coordinate of the *current*\n\t\t\t\t# centroid and the mean of *previous* centroids will tell\n\t\t\t\t# us in which direction the object is moving (negative for\n\t\t\t\t# 'up' and positive for 'down')\n\t\t\t\ty = [c[1] for c in to.centroids]\n\t\t\t\tdirection = centroid[1] - np.mean(y)\n\t\t\t\tto.centroids.append(centroid)\n\n\t\t\t\t# check to see if the object has been counted or not\n\t\t\t\tif not to.counted:\n\t\t\t\t\t# if the direction is negative (indicating the object\n\t\t\t\t\t# is moving up) AND the centroid is above the center\n\t\t\t\t\t# line, count the object\n\t\t\t\t\tif direction < 0 and centroid[1] < H // 2:\n\t\t\t\t\t\ttotalUp += 1\n\t\t\t\t\t\tdate_time = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M\")\n\t\t\t\t\t\tmove_out.append(totalUp)\n\t\t\t\t\t\tout_time.append(date_time)\n\t\t\t\t\t\tto.counted = True\n\n\t\t\t\t\t# if the direction is positive (indicating the object\n\t\t\t\t\t# is moving down) AND the centroid is below the\n\t\t\t\t\t# center line, count the object\n\t\t\t\t\telif direction > 0 and centroid[1] > H // 2:\n\t\t\t\t\t\ttotalDown += 1\n\t\t\t\t\t\tdate_time = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M\")\n\t\t\t\t\t\tmove_in.append(totalDown)\n\t\t\t\t\t\tin_time.append(date_time)\n\t\t\t\t\t\t# if the people limit exceeds over threshold, send an email alert\n\t\t\t\t\t\tif sum(total) >= config[\"Threshold\"]:\n\t\t\t\t\t\t\tcv2.putText(frame, \"-ALERT: People limit exceeded-\", (10, frame.shape[0] - 80),\n\t\t\t\t\t\t\t\tcv2.FONT_HERSHEY_COMPLEX, 0.5, (0, 0, 255), 2)\n\t\t\t\t\t\t\tif config[\"ALERT\"]:\n\t\t\t\t\t\t\t\tlogger.info(\"Sending email alert..\")\n\t\t\t\t\t\t\t\temail_thread = threading.Thread(target = send_mail)\n\t\t\t\t\t\t\t\temail_thread.daemon = True\n\t\t\t\t\t\t\t\temail_thread.start()\n\t\t\t\t\t\t\t\tlogger.info(\"Alert sent!\")\n\t\t\t\t\t\tto.counted = True\n\t\t\t\t\t\t# compute the sum of total people inside\n\t\t\t\t\t\ttotal = []\n\t\t\t\t\t\ttotal.append(len(move_in) - len(move_out))\n\n\t\t\t# store the trackable object in our dictionary\n\t\t\ttrackableObjects[objectID] = to\n\n\t\t\t# draw both the ID of the object and the centroid of the\n\t\t\t# object on the output frame\n\t\t\ttext = \"ID {}\".format(objectID)\n\t\t\tcv2.putText(frame, text, (centroid[0] - 10, centroid[1] - 10),\n\t\t\t\tcv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)\n\t\t\tcv2.circle(frame, (centroid[0], centroid[1]), 4, (255, 255, 255), -1)\n\n\t\t# construct a tuple of information we will be displaying on the frame\n\t\tinfo_status = [\n\t\t(\"Exit\", totalUp),\n\t\t(\"Enter\", totalDown),\n\t\t(\"Status\", status),\n\t\t]\n\n\t\tinfo_total = [\n\t\t(\"Total people inside\", ', '.join(map(str, total))),\n\t\t]\n\n\t\t# display the output\n\t\tfor (i, (k, v)) in enumerate(info_status):\n\t\t\ttext = \"{}: {}\".format(k, v)\n\t\t\tcv2.putText(frame, text, (10, H - ((i * 20) + 20)), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 2)\n\n\t\tfor (i, (k, v)) in enumerate(info_total):\n\t\t\ttext = \"{}: {}\".format(k, v)\n\t\t\tcv2.putText(frame, text, (265, H - ((i * 20) + 60)), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)\n\n\t\t# initiate a simple log to save the counting data\n\t\tif config[\"Log\"]:\n\t\t\tlog_data(move_in, in_time, move_out, out_time)\n\n\t\t# check to see if we should write the frame to disk\n\t\tif writer is not None:\n\t\t\twriter.write(frame)\n\n\t\t# show the output frame\n\t\tcv2.imshow(\"Real-Time Monitoring/Analysis Window\", frame)\n\t\tkey = cv2.waitKey(1) & 0xFF\n\t\t# if the `q` key was pressed, break from the loop\n\t\tif key == ord(\"q\"):\n\t\t\tbreak\n\t\t# increment the total number of frames processed thus far and\n\t\t# then update the FPS counter\n\t\ttotalFrames += 1\n\t\tfps.update()\n\n\t\t# initiate the timer\n\t\tif config[\"Timer\"]:\n\t\t\t# automatic timer to stop the live stream (set to 8 hours/28800s)\n\t\t\tend_time = time.time()\n\t\t\tnum_seconds = (end_time - start_time)\n\t\t\tif num_seconds > 28800:\n\t\t\t\tbreak\n\n\t# stop the timer and display FPS information\n\tfps.stop()\n\tlogger.info(\"Elapsed time: {:.2f}\".format(fps.elapsed()))\n\tlogger.info(\"Approx. FPS: {:.2f}\".format(fps.fps()))\n\n\t# release the camera device/resource (issue 15)\n\tif config[\"Thread\"]:\n\t\tvs.release()\n\n\t# close any open windows\n\tcv2.destroyAllWindows()\n\n# initiate the scheduler\nif config[\"Scheduler\"]:\n\t# runs at every day (09:00 am)\n\tschedule.every().day.at(\"09:00\").do(people_counter)\n\twhile True:\n\t\tschedule.run_pending()\nelse:\n\tpeople_counter()\n","size_bytes":12464},"attached_assets/thread_1757778534870.py":{"content":"import cv2, threading, queue\n\nclass ThreadingClass:\n  # initiate threading class\n  def __init__(self, name):\n    self.cap = cv2.VideoCapture(name)\n\t  # define an empty queue and thread\n    self.q = queue.Queue()\n    t = threading.Thread(target=self._reader)\n    t.daemon = True\n    t.start()\n\n  # read the frames as soon as they are available\n  # this approach removes OpenCV's internal buffer and reduces the frame lag\n  def _reader(self):\n    while True:\n      ret, frame = self.cap.read() # read the frames and ---\n      if not ret:\n        break\n      if not self.q.empty():\n        try:\n          self.q.get_nowait()\n        except queue.Empty:\n          pass\n      self.q.put(frame) # --- store them in a queue (instead of the buffer)\n\n  def read(self):\n    return self.q.get() # fetch frames from the queue one by one\n\n  def release(self):\n    return self.cap.release() # release the hw resource\n","size_bytes":903},"attached_assets/trackableobject_1757778653809.py":{"content":"class TrackableObject:\n\tdef __init__(self, objectID, centroid):\n\t\t# store the object ID, then initialize a list of centroids\n\t\t# using the current centroid\n\t\tself.objectID = objectID\n\t\tself.centroids = [centroid]\n\n\t\t# initialize a boolean used to indicate if the object has\n\t\t# already been counted or not\n\t\tself.counted = False","size_bytes":328},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { passengerCountUpdateSchema, insertBusSchema, insertStationSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time updates\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  const clients = new Set<WebSocket>();\n\n  wss.on('connection', (ws) => {\n    clients.add(ws);\n    console.log('Client connected to WebSocket');\n\n    ws.on('close', () => {\n      clients.delete(ws);\n      console.log('Client disconnected from WebSocket');\n    });\n  });\n\n  // Broadcast to all connected clients\n  function broadcast(data: any) {\n    const message = JSON.stringify(data);\n    clients.forEach(client => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(message);\n      }\n    });\n  }\n\n  // Bus routes\n  app.get('/api/buses', async (req, res) => {\n    try {\n      const buses = await storage.getAllBuses();\n      res.json(buses);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to get buses' });\n    }\n  });\n\n  app.get('/api/buses/active', async (req, res) => {\n    try {\n      const buses = await storage.getActiveBuses();\n      res.json(buses);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to get active buses' });\n    }\n  });\n\n  app.get('/api/buses/:id', async (req, res) => {\n    try {\n      const bus = await storage.getBus(req.params.id);\n      if (!bus) {\n        return res.status(404).json({ message: 'Bus not found' });\n      }\n      res.json(bus);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to get bus' });\n    }\n  });\n\n  app.post('/api/buses', async (req, res) => {\n    try {\n      const validatedData = insertBusSchema.parse(req.body);\n      const bus = await storage.createBus(validatedData);\n      \n      broadcast({\n        type: 'bus_created',\n        data: bus\n      });\n      \n      res.status(201).json(bus);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: 'Invalid bus data', errors: error.errors });\n      } else {\n        res.status(500).json({ message: 'Failed to create bus' });\n      }\n    }\n  });\n\n  // Station routes\n  app.get('/api/stations', async (req, res) => {\n    try {\n      const stations = await storage.getAllStations();\n      res.json(stations);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to get stations' });\n    }\n  });\n\n  app.get('/api/stations/active', async (req, res) => {\n    try {\n      const stations = await storage.getActiveStations();\n      res.json(stations);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to get active stations' });\n    }\n  });\n\n  app.post('/api/stations', async (req, res) => {\n    try {\n      const validatedData = insertStationSchema.parse(req.body);\n      const station = await storage.createStation(validatedData);\n      \n      broadcast({\n        type: 'station_created',\n        data: station\n      });\n      \n      res.status(201).json(station);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: 'Invalid station data', errors: error.errors });\n      } else {\n        res.status(500).json({ message: 'Failed to create station' });\n      }\n    }\n  });\n\n  // Passenger data routes\n  app.post('/api/passenger-data', async (req, res) => {\n    try {\n      const validatedData = passengerCountUpdateSchema.parse(req.body);\n      const updatedBus = await storage.updatePassengerCount(validatedData);\n      \n      if (!updatedBus) {\n        return res.status(404).json({ message: 'Bus not found' });\n      }\n\n      // Broadcast real-time update\n      broadcast({\n        type: 'passenger_count_updated',\n        data: {\n          bus: updatedBus,\n          update: validatedData\n        }\n      });\n\n      res.json({ success: true, bus: updatedBus });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: 'Invalid passenger data', errors: error.errors });\n      } else {\n        res.status(500).json({ message: 'Failed to update passenger count' });\n      }\n    }\n  });\n\n  app.get('/api/passenger-data/bus/:busId', async (req, res) => {\n    try {\n      const data = await storage.getPassengerDataForBus(req.params.busId);\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to get passenger data' });\n    }\n  });\n\n  app.get('/api/passenger-data/recent', async (req, res) => {\n    try {\n      const hours = parseInt(req.query.hours as string) || 24;\n      const data = await storage.getRecentPassengerData(hours);\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to get recent passenger data' });\n    }\n  });\n\n  // Alert routes\n  app.get('/api/alerts', async (req, res) => {\n    try {\n      const alerts = await storage.getAllAlerts();\n      res.json(alerts);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to get alerts' });\n    }\n  });\n\n  app.get('/api/alerts/unread', async (req, res) => {\n    try {\n      const alerts = await storage.getUnreadAlerts();\n      res.json(alerts);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to get unread alerts' });\n    }\n  });\n\n  app.patch('/api/alerts/:id/read', async (req, res) => {\n    try {\n      const success = await storage.markAlertAsRead(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: 'Alert not found' });\n      }\n      \n      broadcast({\n        type: 'alert_marked_read',\n        data: { alertId: req.params.id }\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to mark alert as read' });\n    }\n  });\n\n  // Activity log routes\n  app.get('/api/activity', async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 50;\n      const activities = await storage.getRecentActivity(limit);\n      res.json(activities);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to get activity log' });\n    }\n  });\n\n  app.get('/api/activity/bus/:busId', async (req, res) => {\n    try {\n      const activities = await storage.getActivityForBus(req.params.busId);\n      res.json(activities);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to get bus activity' });\n    }\n  });\n\n  // Dashboard stats route\n  app.get('/api/dashboard/stats', async (req, res) => {\n    try {\n      const buses = await storage.getActiveBuses();\n      const stations = await storage.getActiveStations();\n      const unreadAlerts = await storage.getUnreadAlerts();\n      \n      const totalPassengers = buses.reduce((sum, bus) => sum + bus.currentPassengers, 0);\n      const activeBuses = buses.filter(bus => bus.status === 'active').length;\n      const averageOccupancy = buses.length > 0 \n        ? Math.round((totalPassengers / buses.reduce((sum, bus) => sum + bus.capacity, 0)) * 100)\n        : 0;\n      \n      const stats = {\n        totalPassengers,\n        activeBuses: buses.length,\n        activeBusesRunning: activeBuses,\n        averageOccupancy,\n        criticalAlerts: unreadAlerts.filter(alert => alert.severity === 'critical').length,\n        totalAlerts: unreadAlerts.length,\n        activeStations: stations.length,\n      };\n      \n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to get dashboard stats' });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":7715},"server/storage.ts":{"content":"import { type Bus, type Station, type PassengerData, type Alert, type ActivityLog, type InsertBus, type InsertStation, type InsertPassengerData, type InsertAlert, type InsertActivityLog, type PassengerCountUpdate } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Bus methods\n  getBus(id: string): Promise<Bus | undefined>;\n  getAllBuses(): Promise<Bus[]>;\n  getActiveBuses(): Promise<Bus[]>;\n  createBus(bus: InsertBus): Promise<Bus>;\n  updateBus(id: string, updates: Partial<Bus>): Promise<Bus | undefined>;\n  deleteBus(id: string): Promise<boolean>;\n\n  // Station methods\n  getStation(id: string): Promise<Station | undefined>;\n  getAllStations(): Promise<Station[]>;\n  getActiveStations(): Promise<Station[]>;\n  createStation(station: InsertStation): Promise<Station>;\n  updateStation(id: string, updates: Partial<Station>): Promise<Station | undefined>;\n\n  // Passenger data methods\n  createPassengerData(data: InsertPassengerData): Promise<PassengerData>;\n  getPassengerDataForBus(busId: string): Promise<PassengerData[]>;\n  getRecentPassengerData(hours: number): Promise<PassengerData[]>;\n\n  // Alert methods\n  getAlert(id: string): Promise<Alert | undefined>;\n  getAllAlerts(): Promise<Alert[]>;\n  getUnreadAlerts(): Promise<Alert[]>;\n  createAlert(alert: InsertAlert): Promise<Alert>;\n  markAlertAsRead(id: string): Promise<boolean>;\n  deleteAlert(id: string): Promise<boolean>;\n\n  // Activity log methods\n  createActivityLog(log: InsertActivityLog): Promise<ActivityLog>;\n  getRecentActivity(limit: number): Promise<ActivityLog[]>;\n  getActivityForBus(busId: string): Promise<ActivityLog[]>;\n\n  // Passenger count update\n  updatePassengerCount(data: PassengerCountUpdate): Promise<Bus | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private buses: Map<string, Bus>;\n  private stations: Map<string, Station>;\n  private passengerData: PassengerData[];\n  private alerts: Map<string, Alert>;\n  private activityLogs: ActivityLog[];\n\n  constructor() {\n    this.buses = new Map();\n    this.stations = new Map();\n    this.passengerData = [];\n    this.alerts = new Map();\n    this.activityLogs = [];\n    \n    // Initialize with sample data\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    // Sample buses\n    const sampleBuses: Bus[] = [\n      {\n        id: \"BUS-247\",\n        busNumber: \"247\",\n        route: \"Route A - Downtown\",\n        capacity: 40,\n        currentPassengers: 0,\n        status: \"active\",\n        location: \"Depot\",\n        lastUpdate: new Date(),\n        isActive: true,\n        alertThreshold: 35,\n      },\n      {\n        id: \"BUS-152\",\n        busNumber: \"152\",\n        route: \"Route B - Airport\",\n        capacity: 45,\n        currentPassengers: 0,\n        status: \"active\",\n        location: \"Depot\",\n        lastUpdate: new Date(),\n        isActive: true,\n        alertThreshold: 40,\n      },\n      {\n        id: \"BUS-089\",\n        busNumber: \"089\",\n        route: \"Route C - University\",\n        capacity: 40,\n        currentPassengers: 0,\n        status: \"active\",\n        location: \"Depot\",\n        lastUpdate: new Date(),\n        isActive: true,\n        alertThreshold: 35,\n      },\n    ];\n\n    sampleBuses.forEach(bus => this.buses.set(bus.id, bus));\n\n    // Sample stations\n    const sampleStations: Station[] = [\n      {\n        id: \"STATION-001\",\n        name: \"Downtown Terminal\",\n        location: \"Main Street & 5th Ave\",\n        waitingPassengers: 0,\n        lastUpdate: new Date(),\n        isActive: true,\n      },\n      {\n        id: \"STATION-002\",\n        name: \"Airport Hub\",\n        location: \"Terminal 1 - Departure Level\",\n        waitingPassengers: 0,\n        lastUpdate: new Date(),\n        isActive: true,\n      },\n      {\n        id: \"STATION-003\",\n        name: \"University Campus\",\n        location: \"Student Center Plaza\",\n        waitingPassengers: 0,\n        lastUpdate: new Date(),\n        isActive: true,\n      },\n    ];\n\n    sampleStations.forEach(station => this.stations.set(station.id, station));\n  }\n\n  // Bus methods\n  async getBus(id: string): Promise<Bus | undefined> {\n    return this.buses.get(id);\n  }\n\n  async getAllBuses(): Promise<Bus[]> {\n    return Array.from(this.buses.values());\n  }\n\n  async getActiveBuses(): Promise<Bus[]> {\n    return Array.from(this.buses.values()).filter(bus => bus.isActive);\n  }\n\n  async createBus(insertBus: InsertBus): Promise<Bus> {\n    const bus: Bus = {\n      id: insertBus.id,\n      busNumber: insertBus.busNumber,\n      route: insertBus.route,\n      capacity: insertBus.capacity ?? 40,\n      currentPassengers: insertBus.currentPassengers ?? 0,\n      status: insertBus.status ?? \"active\",\n      location: insertBus.location ?? null,\n      isActive: insertBus.isActive ?? true,\n      alertThreshold: insertBus.alertThreshold ?? 35,\n      lastUpdate: new Date(),\n    };\n    this.buses.set(bus.id, bus);\n    return bus;\n  }\n\n  async updateBus(id: string, updates: Partial<Bus>): Promise<Bus | undefined> {\n    const bus = this.buses.get(id);\n    if (!bus) return undefined;\n\n    const updatedBus = {\n      ...bus,\n      ...updates,\n      lastUpdate: new Date(),\n    };\n    this.buses.set(id, updatedBus);\n    return updatedBus;\n  }\n\n  async deleteBus(id: string): Promise<boolean> {\n    return this.buses.delete(id);\n  }\n\n  // Station methods\n  async getStation(id: string): Promise<Station | undefined> {\n    return this.stations.get(id);\n  }\n\n  async getAllStations(): Promise<Station[]> {\n    return Array.from(this.stations.values());\n  }\n\n  async getActiveStations(): Promise<Station[]> {\n    return Array.from(this.stations.values()).filter(station => station.isActive);\n  }\n\n  async createStation(insertStation: InsertStation): Promise<Station> {\n    const station: Station = {\n      id: insertStation.id,\n      name: insertStation.name,\n      location: insertStation.location,\n      waitingPassengers: insertStation.waitingPassengers ?? 0,\n      isActive: insertStation.isActive ?? true,\n      lastUpdate: new Date(),\n    };\n    this.stations.set(station.id, station);\n    return station;\n  }\n\n  async updateStation(id: string, updates: Partial<Station>): Promise<Station | undefined> {\n    const station = this.stations.get(id);\n    if (!station) return undefined;\n\n    const updatedStation = {\n      ...station,\n      ...updates,\n      lastUpdate: new Date(),\n    };\n    this.stations.set(id, updatedStation);\n    return updatedStation;\n  }\n\n  // Passenger data methods\n  async createPassengerData(data: InsertPassengerData): Promise<PassengerData> {\n    const passengerData: PassengerData = {\n      id: randomUUID(),\n      busId: data.busId ?? null,\n      stationId: data.stationId ?? null,\n      passengersIn: data.passengersIn ?? 0,\n      passengersOut: data.passengersOut ?? 0,\n      timestamp: new Date(),\n    };\n    this.passengerData.push(passengerData);\n    return passengerData;\n  }\n\n  async getPassengerDataForBus(busId: string): Promise<PassengerData[]> {\n    return this.passengerData.filter(data => data.busId === busId);\n  }\n\n  async getRecentPassengerData(hours: number): Promise<PassengerData[]> {\n    const cutoff = new Date(Date.now() - hours * 60 * 60 * 1000);\n    return this.passengerData.filter(data => data.timestamp && data.timestamp > cutoff);\n  }\n\n  // Alert methods\n  async getAlert(id: string): Promise<Alert | undefined> {\n    return this.alerts.get(id);\n  }\n\n  async getAllAlerts(): Promise<Alert[]> {\n    return Array.from(this.alerts.values()).sort((a, b) => \n      (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0)\n    );\n  }\n\n  async getUnreadAlerts(): Promise<Alert[]> {\n    return Array.from(this.alerts.values()).filter(alert => !alert.isRead);\n  }\n\n  async createAlert(insertAlert: InsertAlert): Promise<Alert> {\n    const alert: Alert = {\n      id: randomUUID(),\n      busId: insertAlert.busId ?? null,\n      alertType: insertAlert.alertType,\n      message: insertAlert.message,\n      severity: insertAlert.severity ?? \"medium\",\n      isRead: insertAlert.isRead ?? false,\n      createdAt: new Date(),\n    };\n    this.alerts.set(alert.id, alert);\n    return alert;\n  }\n\n  async markAlertAsRead(id: string): Promise<boolean> {\n    const alert = this.alerts.get(id);\n    if (!alert) return false;\n\n    this.alerts.set(id, { ...alert, isRead: true });\n    return true;\n  }\n\n  async deleteAlert(id: string): Promise<boolean> {\n    return this.alerts.delete(id);\n  }\n\n  // Activity log methods\n  async createActivityLog(insertLog: InsertActivityLog): Promise<ActivityLog> {\n    const log: ActivityLog = {\n      id: randomUUID(),\n      busId: insertLog.busId ?? null,\n      activity: insertLog.activity,\n      description: insertLog.description ?? null,\n      timestamp: new Date(),\n    };\n    this.activityLogs.push(log);\n    return log;\n  }\n\n  async getRecentActivity(limit: number): Promise<ActivityLog[]> {\n    return this.activityLogs\n      .sort((a, b) => (b.timestamp?.getTime() || 0) - (a.timestamp?.getTime() || 0))\n      .slice(0, limit);\n  }\n\n  async getActivityForBus(busId: string): Promise<ActivityLog[]> {\n    return this.activityLogs.filter(log => log.busId === busId);\n  }\n\n  // Passenger count update\n  async updatePassengerCount(data: PassengerCountUpdate): Promise<Bus | undefined> {\n    const bus = this.buses.get(data.busId);\n    if (!bus) return undefined;\n\n    const updates: Partial<Bus> = {\n      currentPassengers: data.currentPassengers,\n      lastUpdate: new Date(),\n    };\n\n    if (data.location) {\n      updates.location = data.location;\n    }\n\n    // Update status based on capacity\n    if (data.currentPassengers > bus.capacity) {\n      updates.status = \"over_capacity\";\n    } else if (data.currentPassengers >= bus.alertThreshold) {\n      updates.status = \"near_capacity\";\n    } else {\n      updates.status = \"active\";\n    }\n\n    const updatedBus = await this.updateBus(data.busId, updates);\n\n    // Create passenger data record\n    await this.createPassengerData({\n      busId: data.busId,\n      stationId: undefined,\n      passengersIn: data.passengersIn,\n      passengersOut: data.passengersOut,\n    });\n\n    // Create activity log\n    await this.createActivityLog({\n      busId: data.busId,\n      activity: \"passenger_count_update\",\n      description: `Passenger count updated: ${data.currentPassengers}/${bus.capacity}`,\n    });\n\n    // Create alert if over threshold\n    if (data.currentPassengers > bus.alertThreshold) {\n      await this.createAlert({\n        busId: data.busId,\n        alertType: data.currentPassengers > bus.capacity ? \"over_capacity\" : \"near_capacity\",\n        message: `Bus ${bus.busNumber} ${data.currentPassengers > bus.capacity ? \"exceeded capacity\" : \"near capacity\"} (${data.currentPassengers}/${bus.capacity})`,\n        severity: data.currentPassengers > bus.capacity ? \"critical\" : \"high\",\n        isRead: false,\n      });\n    }\n\n    return updatedBus;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":10920},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, real } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const buses = pgTable(\"buses\", {\n  id: varchar(\"id\").primaryKey(),\n  busNumber: text(\"bus_number\").notNull(),\n  route: text(\"route\").notNull(),\n  capacity: integer(\"capacity\").notNull().default(40),\n  currentPassengers: integer(\"current_passengers\").notNull().default(0),\n  status: text(\"status\").notNull().default(\"active\"), // active, maintenance, offline\n  location: text(\"location\"),\n  lastUpdate: timestamp(\"last_update\").defaultNow(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  alertThreshold: integer(\"alert_threshold\").notNull().default(35),\n});\n\nexport const stations = pgTable(\"stations\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  location: text(\"location\").notNull(),\n  waitingPassengers: integer(\"waiting_passengers\").notNull().default(0),\n  lastUpdate: timestamp(\"last_update\").defaultNow(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n});\n\nexport const passengerData = pgTable(\"passenger_data\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  busId: varchar(\"bus_id\").references(() => buses.id),\n  stationId: varchar(\"station_id\").references(() => stations.id),\n  passengersIn: integer(\"passengers_in\").notNull().default(0),\n  passengersOut: integer(\"passengers_out\").notNull().default(0),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const alerts = pgTable(\"alerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  busId: varchar(\"bus_id\").references(() => buses.id),\n  alertType: text(\"alert_type\").notNull(), // capacity, maintenance, offline\n  message: text(\"message\").notNull(),\n  severity: text(\"severity\").notNull().default(\"medium\"), // low, medium, high, critical\n  isRead: boolean(\"is_read\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const activityLog = pgTable(\"activity_log\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  busId: varchar(\"bus_id\").references(() => buses.id),\n  activity: text(\"activity\").notNull(),\n  description: text(\"description\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertBusSchema = createInsertSchema(buses).omit({ \n  lastUpdate: true \n});\n\nexport const insertStationSchema = createInsertSchema(stations).omit({ \n  lastUpdate: true \n});\n\nexport const insertPassengerDataSchema = createInsertSchema(passengerData).omit({ \n  id: true,\n  timestamp: true \n});\n\nexport const insertAlertSchema = createInsertSchema(alerts).omit({ \n  id: true,\n  createdAt: true \n});\n\nexport const insertActivityLogSchema = createInsertSchema(activityLog).omit({ \n  id: true,\n  timestamp: true \n});\n\n// Passenger count update schema\nexport const passengerCountUpdateSchema = z.object({\n  busId: z.string(),\n  currentPassengers: z.number().min(0),\n  passengersIn: z.number().min(0),\n  passengersOut: z.number().min(0),\n  location: z.string().optional(),\n});\n\n// Types\nexport type Bus = typeof buses.$inferSelect;\nexport type Station = typeof stations.$inferSelect;\nexport type PassengerData = typeof passengerData.$inferSelect;\nexport type Alert = typeof alerts.$inferSelect;\nexport type ActivityLog = typeof activityLog.$inferSelect;\n\nexport type InsertBus = z.infer<typeof insertBusSchema>;\nexport type InsertStation = z.infer<typeof insertStationSchema>;\nexport type InsertPassengerData = z.infer<typeof insertPassengerDataSchema>;\nexport type InsertAlert = z.infer<typeof insertAlertSchema>;\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;\nexport type PassengerCountUpdate = z.infer<typeof passengerCountUpdateSchema>;\n","size_bytes":3828},"tracker/centroidtracker.py":{"content":"# import the necessary packages\nfrom scipy.spatial import distance as dist\nfrom collections import OrderedDict\nimport numpy as np\n\nclass CentroidTracker:\n\tdef __init__(self, maxDisappeared=50, maxDistance=50):\n\t\t# initialize the next unique object ID along with two ordered\n\t\t# dictionaries used to keep track of mapping a given object\n\t\t# ID to its centroid and number of consecutive frames it has\n\t\t# been marked as \"disappeared\", respectively\n\t\tself.nextObjectID = 0\n\t\tself.objects = OrderedDict()\n\t\tself.disappeared = OrderedDict()\n\n\t\t# store the number of maximum consecutive frames a given\n\t\t# object is allowed to be marked as \"disappeared\" until we\n\t\t# need to deregister the object from tracking\n\t\tself.maxDisappeared = maxDisappeared\n\n\t\t# store the maximum distance between centroids to associate\n\t\t# an object -- if the distance is larger than this maximum\n\t\t# distance we'll start to mark the object as \"disappeared\"\n\t\tself.maxDistance = maxDistance\n\n\tdef register(self, centroid):\n\t\t# when registering an object we use the next available object\n\t\t# ID to store the centroid\n\t\tself.objects[self.nextObjectID] = centroid\n\t\tself.disappeared[self.nextObjectID] = 0\n\t\tself.nextObjectID += 1\n\n\tdef deregister(self, objectID):\n\t\t# to deregister an object ID we delete the object ID from\n\t\t# both of our respective dictionaries\n\t\tdel self.objects[objectID]\n\t\tdel self.disappeared[objectID]\n\n\tdef update(self, rects):\n\t\t# check to see if the list of input bounding box rectangles\n\t\t# is empty\n\t\tif len(rects) == 0:\n\t\t\t# loop over any existing tracked objects and mark them\n\t\t\t# as disappeared\n\t\t\tfor objectID in list(self.disappeared.keys()):\n\t\t\t\tself.disappeared[objectID] += 1\n\n\t\t\t\t# if we have reached a maximum number of consecutive\n\t\t\t\t# frames where a given object has been marked as\n\t\t\t\t# missing, deregister it\n\t\t\t\tif self.disappeared[objectID] > self.maxDisappeared:\n\t\t\t\t\tself.deregister(objectID)\n\n\t\t\t# return early as there are no centroids or tracking info\n\t\t\t# to update\n\t\t\treturn self.objects\n\n\t\t# initialize an array of input centroids for the current frame\n\t\tinputCentroids = np.zeros((len(rects), 2), dtype=\"int\")\n\n\t\t# loop over the bounding box rectangles\n\t\tfor (i, (startX, startY, endX, endY)) in enumerate(rects):\n\t\t\t# use the bounding box coordinates to derive the centroid\n\t\t\tcX = int((startX + endX) / 2.0)\n\t\t\tcY = int((startY + endY) / 2.0)\n\t\t\tinputCentroids[i] = (cX, cY)\n\n\t\t# if we are currently not tracking any objects take the input\n\t\t# centroids and register each of them\n\t\tif len(self.objects) == 0:\n\t\t\tfor i in range(0, len(inputCentroids)):\n\t\t\t\tself.register(inputCentroids[i])\n\n\t\t# otherwise, are are currently tracking objects so we need to\n\t\t# try to match the input centroids to existing object\n\t\t# centroids\n\t\telse:\n\t\t\t# grab the set of object IDs and corresponding centroids\n\t\t\tobjectIDs = list(self.objects.keys())\n\t\t\tobjectCentroids = list(self.objects.values())\n\n\t\t\t# compute the distance between each pair of object\n\t\t\t# centroids and input centroids, respectively -- our\n\t\t\t# goal will be to match an input centroid to an existing\n\t\t\t# object centroid\n\t\t\tD = dist.cdist(np.array(objectCentroids), inputCentroids)\n\n\t\t\t# in order to perform this matching we must (1) find the\n\t\t\t# smallest value in each row and then (2) sort the row\n\t\t\t# indexes based on their minimum values so that the row\n\t\t\t# with the smallest value as at the *front* of the index\n\t\t\t# list\n\t\t\trows = D.min(axis=1).argsort()\n\n\t\t\t# next, we perform a similar process on the columns by\n\t\t\t# finding the smallest value in each column and then\n\t\t\t# sorting using the previously computed row index list\n\t\t\tcols = D.argmin(axis=1)[rows]\n\n\t\t\t# in order to determine if we need to update, register,\n\t\t\t# or deregister an object we need to keep track of which\n\t\t\t# of the rows and column indexes we have already examined\n\t\t\tusedRows = set()\n\t\t\tusedCols = set()\n\n\t\t\t# loop over the combination of the (row, column) index\n\t\t\t# tuples\n\t\t\tfor (row, col) in zip(rows, cols):\n\t\t\t\t# if we have already examined either the row or\n\t\t\t\t# column value before, ignore it\n\t\t\t\tif row in usedRows or col in usedCols:\n\t\t\t\t\tcontinue\n\n\t\t\t\t# if the distance between centroids is greater than\n\t\t\t\t# the maximum distance, do not associate the two\n\t\t\t\t# centroids to the same object\n\t\t\t\tif D[row, col] > self.maxDistance:\n\t\t\t\t\tcontinue\n\n\t\t\t\t# otherwise, grab the object ID for the current row,\n\t\t\t\t# set its new centroid, and reset the disappeared\n\t\t\t\t# counter\n\t\t\t\tobjectID = objectIDs[row]\n\t\t\t\tself.objects[objectID] = inputCentroids[col]\n\t\t\t\tself.disappeared[objectID] = 0\n\n\t\t\t\t# indicate that we have examined each of the row and\n\t\t\t\t# column indexes, respectively\n\t\t\t\tusedRows.add(row)\n\t\t\t\tusedCols.add(col)\n\n\t\t\t# compute both the row and column index we have NOT yet\n\t\t\t# examined\n\t\t\tunusedRows = set(range(0, D.shape[0])).difference(usedRows)\n\t\t\tunusedCols = set(range(0, D.shape[1])).difference(usedCols)\n\n\t\t\t# in the event that the number of object centroids is\n\t\t\t# equal or greater than the number of input centroids\n\t\t\t# we need to check and see if some of these objects have\n\t\t\t# potentially disappeared\n\t\t\tif D.shape[0] >= D.shape[1]:\n\t\t\t\t# loop over the unused row indexes\n\t\t\t\tfor row in unusedRows:\n\t\t\t\t\t# grab the object ID for the corresponding row\n\t\t\t\t\t# index and increment the disappeared counter\n\t\t\t\t\tobjectID = objectIDs[row]\n\t\t\t\t\tself.disappeared[objectID] += 1\n\n\t\t\t\t\t# check to see if the number of consecutive\n\t\t\t\t\t# frames the object has been marked \"disappeared\"\n\t\t\t\t\t# for warrants deregistering the object\n\t\t\t\t\tif self.disappeared[objectID] > self.maxDisappeared:\n\t\t\t\t\t\tself.deregister(objectID)\n\n\t\t\t# otherwise, if the number of input centroids is greater\n\t\t\t# than the number of existing object centroids we need to\n\t\t\t# register each new input centroid as a trackable object\n\t\t\telse:\n\t\t\t\tfor col in unusedCols:\n\t\t\t\t\tself.register(inputCentroids[col])\n\n\t\t# return the set of trackable objects\n\t\treturn self.objects\n","size_bytes":5935},"tracker/trackableobject.py":{"content":"class TrackableObject:\n\tdef __init__(self, objectID, centroid):\n\t\t# store the object ID, then initialize a list of centroids\n\t\t# using the current centroid\n\t\tself.objectID = objectID\n\t\tself.centroids = [centroid]\n\n\t\t# initialize a boolean used to indicate if the object has\n\t\t# already been counted or not\n\t\tself.counted = False\n","size_bytes":329},"utils/mailer.py":{"content":"import smtplib\nimport json\nimport os\n\nclass Mailer:\n    \"\"\" Class to initiate the email alert function. \"\"\"\n\n    def __init__(self):\n        # Use environment variables for email configuration\n        self.email = os.getenv(\"EMAIL_SEND\", \"\")\n        self.password = os.getenv(\"EMAIL_PASSWORD\", \"\")\n        self.port = 465\n\n    def send(self, recipient_email):\n        if not self.email or not self.password:\n            print(\"Email configuration not found. Please set EMAIL_SEND and EMAIL_PASSWORD environment variables.\")\n            return\n        \n        try:\n            server = smtplib.SMTP_SSL('smtp.gmail.com', self.port)\n            server.login(self.email, self.password)\n            # message to be sent\n            SUBJECT = 'BUS MONITORING ALERT!'\n            TEXT = f'Passenger limit exceeded in your bus system!'\n            message = 'Subject: {}\\n\\n{}'.format(SUBJECT, TEXT)\n            # send the mail\n            server.sendmail(self.email, recipient_email, message)\n            server.quit()\n            print(f\"Alert email sent to {recipient_email}\")\n        except Exception as e:\n            print(f\"Failed to send email: {e}\")\n","size_bytes":1153},"utils/thread.py":{"content":"import cv2, threading, queue\n\nclass ThreadingClass:\n  # initiate threading class\n  def __init__(self, name):\n    self.cap = cv2.VideoCapture(name)\n    # define an empty queue and thread\n    self.q = queue.Queue()\n    t = threading.Thread(target=self._reader)\n    t.daemon = True\n    t.start()\n\n  # read the frames as soon as they are available\n  # this approach removes OpenCV's internal buffer and reduces the frame lag\n  def _reader(self):\n    while True:\n      ret, frame = self.cap.read() # read the frames and ---\n      if not ret:\n        break\n      if not self.q.empty():\n        try:\n          self.q.get_nowait()\n        except queue.Empty:\n          pass\n      self.q.put(frame) # --- store them in a queue (instead of the buffer)\n\n  def read(self):\n    return self.q.get() # fetch frames from the queue one by one\n\n  def release(self):\n    return self.cap.release() # release the hw resource\n","size_bytes":904},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":770},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 98%);\n  --foreground: hsl(222.2 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222.2 84% 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222.2 84% 4.9%);\n  --primary: hsl(210 79% 46%);\n  --primary-foreground: hsl(0 0% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222.2 84% 4.9%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222.2 84% 4.9%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(210 79% 46%);\n  --chart-1: hsl(12 76% 61%);\n  --chart-2: hsl(173 58% 39%);\n  --chart-3: hsl(197 37% 24%);\n  --chart-4: hsl(43 74% 66%);\n  --chart-5: hsl(27 87% 67%);\n  --radius: 0.5rem;\n  --font-sans: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n}\n\n.dark {\n  --background: hsl(222.2 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222.2 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222.2 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(210 79% 46%);\n  --primary-foreground: hsl(0 0% 98%);\n  --secondary: hsl(217.2 32.6% 17.5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(217.2 32.6% 17.5%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(212.7 26.8% 83.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n@layer components {\n  .status-indicator {\n    @apply w-2 h-2 rounded-full inline-block;\n  }\n  \n  .status-online {\n    @apply bg-green-500;\n  }\n  \n  .status-warning {\n    @apply bg-orange-500;\n  }\n  \n  .status-offline {\n    @apply bg-red-500;\n  }\n  \n  .pulse {\n    animation: pulse 2s infinite;\n  }\n  \n  @keyframes pulse {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.5; }\n  }\n  \n  .gradient-bg {\n    background: linear-gradient(135deg, var(--primary) 0%, hsl(210 79% 56%) 100%);\n  }\n}\n","size_bytes":2468},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/activity-log.tsx":{"content":"import type { ActivityLog as ActivityLogType } from \"@shared/schema\";\n\ninterface ActivityLogProps {\n  activities: ActivityLogType[];\n}\n\nexport default function ActivityLog({ activities }: ActivityLogProps) {\n  const getActivityIcon = (activity: string) => {\n    switch (activity) {\n      case 'passenger_count_update':\n        return { icon: 'fas fa-users', color: 'text-primary' };\n      case 'bus_status_change':\n        return { icon: 'fas fa-bus', color: 'text-chart-2' };\n      case 'alert_triggered':\n        return { icon: 'fas fa-exclamation-triangle', color: 'text-destructive' };\n      case 'system_sync':\n        return { icon: 'fas fa-sync-alt', color: 'text-primary' };\n      default:\n        return { icon: 'fas fa-info-circle', color: 'text-muted-foreground' };\n    }\n  };\n\n  const getTimeAgo = (timestamp: Date | string | null) => {\n    if (!timestamp) return \"Unknown time\";\n    \n    const now = new Date();\n    const timeDate = typeof timestamp === 'string' ? new Date(timestamp) : timestamp;\n    const diffMs = now.getTime() - timeDate.getTime();\n    const diffSec = Math.floor(diffMs / 1000);\n    const diffMin = Math.floor(diffSec / 60);\n    const diffHour = Math.floor(diffMin / 60);\n    \n    if (diffSec < 60) return `${diffSec} seconds ago`;\n    if (diffMin < 60) return `${diffMin} minutes ago`;\n    if (diffHour < 24) return `${diffHour} hours ago`;\n    return `${Math.floor(diffHour / 24)} days ago`;\n  };\n\n  const getActivityTitle = (activity: string) => {\n    switch (activity) {\n      case 'passenger_count_update':\n        return 'Passenger Count Updated';\n      case 'bus_status_change':\n        return 'Bus Status Changed';\n      case 'alert_triggered':\n        return 'Alert Triggered';\n      case 'system_sync':\n        return 'System Data Sync';\n      default:\n        return 'System Activity';\n    }\n  };\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border shadow-sm\">\n      <div className=\"p-6 border-b border-border\">\n        <h2 className=\"text-lg font-semibold text-foreground\">Recent Activity</h2>\n      </div>\n      <div className=\"p-6\">\n        <div className=\"space-y-4\">\n          {activities.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <i className=\"fas fa-history text-4xl mb-4 opacity-50\"></i>\n              <p>No recent activity</p>\n            </div>\n          ) : (\n            activities.map((activity) => {\n              const iconInfo = getActivityIcon(activity.activity);\n              \n              return (\n                <div key={activity.id} className=\"flex items-start space-x-4 p-4 bg-accent/30 rounded-lg\" data-testid={`activity-${activity.id}`}>\n                  <div className={`w-8 h-8 ${iconInfo.color.includes('destructive') ? 'bg-destructive/10' : iconInfo.color.includes('primary') ? 'bg-primary/10' : 'bg-chart-2/10'} rounded-full flex items-center justify-center flex-shrink-0`}>\n                    <i className={`${iconInfo.icon} ${iconInfo.color} text-sm`}></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"font-medium text-foreground\" data-testid={`activity-title-${activity.id}`}>\n                        {getActivityTitle(activity.activity)}\n                      </h4>\n                      <span className=\"text-sm text-muted-foreground\" data-testid={`activity-time-${activity.id}`}>\n                        {getTimeAgo(activity.timestamp)}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-1\" data-testid={`activity-description-${activity.id}`}>\n                      {activity.description || `${activity.activity} activity occurred`}\n                    </p>\n                  </div>\n                </div>\n              );\n            })\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3966},"client/src/components/alert-modal.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Alert } from \"@shared/schema\";\n\ninterface AlertModalProps {\n  alert: Alert;\n  onClose: () => void;\n}\n\nexport default function AlertModal({ alert, onClose }: AlertModalProps) {\n  const queryClient = useQueryClient();\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (alertId: string) => {\n      return apiRequest('PATCH', `/api/alerts/${alertId}/read`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/alerts'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n    },\n  });\n\n  const handleDismiss = () => {\n    if (!alert.isRead) {\n      markAsReadMutation.mutate(alert.id);\n    }\n    onClose();\n  };\n\n  const handleTakeAction = () => {\n    // TODO: Implement take action functionality\n    handleDismiss();\n  };\n\n  const getAlertIcon = () => {\n    switch (alert.severity) {\n      case 'critical':\n        return 'fas fa-exclamation-triangle text-destructive';\n      case 'high':\n        return 'fas fa-exclamation-circle text-orange-500';\n      case 'medium':\n        return 'fas fa-info-circle text-primary';\n      default:\n        return 'fas fa-bell text-muted-foreground';\n    }\n  };\n\n  const getRecommendations = (alertType: string) => {\n    switch (alertType) {\n      case 'over_capacity':\n      case 'capacity':\n        return [\n          'Deploy additional bus to the route',\n          'Alert passengers at upcoming stops',\n          'Monitor passenger flow at next station',\n        ];\n      case 'maintenance':\n        return [\n          'Schedule immediate maintenance check',\n          'Notify dispatch for replacement bus',\n          'Update passenger information systems',\n        ];\n      case 'offline':\n        return [\n          'Check bus communication systems',\n          'Contact bus driver directly',\n          'Deploy backup vehicle if needed',\n        ];\n      default:\n        return ['Contact system administrator', 'Check system logs', 'Monitor situation'];\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\" onClick={onClose}>\n      <div className=\"bg-card rounded-lg shadow-lg max-w-md w-full mx-4\" onClick={(e) => e.stopPropagation()}>\n        <div className=\"p-6 border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold text-foreground\">Critical Alert</h3>\n            <button \n              className=\"text-muted-foreground hover:text-foreground\"\n              onClick={onClose}\n              data-testid=\"button-close-modal\"\n            >\n              <i className=\"fas fa-times\"></i>\n            </button>\n          </div>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"flex items-start space-x-3\">\n            <div className={`w-10 h-10 ${\n              alert.severity === 'critical' ? 'bg-destructive/10' : \n              alert.severity === 'high' ? 'bg-orange-500/10' : \n              'bg-primary/10'\n            } rounded-full flex items-center justify-center flex-shrink-0`}>\n              <i className={getAlertIcon()}></i>\n            </div>\n            <div className=\"flex-1\">\n              <h4 className=\"font-medium text-foreground mb-2\" data-testid=\"alert-title\">\n                {alert.alertType === 'over_capacity' ? 'Passenger Capacity Exceeded' : \n                 alert.alertType === 'near_capacity' ? 'Near Capacity Warning' :\n                 alert.alertType === 'maintenance' ? 'Maintenance Required' :\n                 alert.alertType === 'offline' ? 'Bus Offline' :\n                 'System Alert'}\n              </h4>\n              <p className=\"text-sm text-muted-foreground mb-4\" data-testid=\"alert-message\">\n                {alert.message}\n              </p>\n              <div className=\"bg-secondary p-3 rounded-lg\">\n                <div className=\"text-sm font-medium text-foreground mb-1\">Recommended Actions:</div>\n                <ul className=\"text-sm text-muted-foreground space-y-1\">\n                  {getRecommendations(alert.alertType).map((recommendation, index) => (\n                    <li key={index} data-testid={`alert-recommendation-${index}`}>• {recommendation}</li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"p-6 border-t border-border flex justify-end space-x-3\">\n          <Button \n            variant=\"outline\" \n            onClick={handleDismiss}\n            disabled={markAsReadMutation.isPending}\n            data-testid=\"button-dismiss-alert\"\n          >\n            Dismiss\n          </Button>\n          <Button \n            onClick={handleTakeAction}\n            disabled={markAsReadMutation.isPending}\n            data-testid=\"button-take-action\"\n          >\n            Take Action\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5064},"client/src/components/bus-status-card.tsx":{"content":"import type { Bus } from \"@shared/schema\";\n\ninterface BusStatusCardProps {\n  buses: Bus[];\n  isLoading: boolean;\n}\n\nexport default function BusStatusCard({ buses, isLoading }: BusStatusCardProps) {\n  const getStatusInfo = (bus: Bus) => {\n    const occupancyPercent = Math.round((bus.currentPassengers / bus.capacity) * 100);\n    \n    if (bus.status === 'over_capacity' || bus.currentPassengers > bus.capacity) {\n      return {\n        label: 'Over Capacity',\n        color: 'bg-destructive/10 text-destructive',\n        indicator: 'status-offline',\n        barColor: 'bg-destructive',\n        barWidth: Math.min(occupancyPercent, 120),\n      };\n    } else if (bus.status === 'near_capacity' || bus.currentPassengers >= bus.alertThreshold) {\n      return {\n        label: 'Near Capacity',\n        color: 'bg-orange-500/10 text-orange-600',\n        indicator: 'status-warning',\n        barColor: 'bg-orange-500',\n        barWidth: occupancyPercent,\n      };\n    } else {\n      return {\n        label: 'Normal operation',\n        color: 'bg-chart-2/10 text-chart-2',\n        indicator: 'status-online',\n        barColor: 'bg-chart-2',\n        barWidth: occupancyPercent,\n      };\n    }\n  };\n\n  const getBusIconColor = (index: number) => {\n    const colors = ['bg-primary', 'bg-chart-2', 'bg-chart-1', 'bg-chart-3'];\n    return colors[index % colors.length];\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card rounded-lg border border-border shadow-sm\">\n        <div className=\"p-6 border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-semibold text-foreground\">Live Bus Status</h2>\n            <button className=\"text-sm text-primary hover:text-primary/80\" data-testid=\"button-refresh-buses\">\n              <i className=\"fas fa-sync-alt mr-1\"></i>\n              Refresh\n            </button>\n          </div>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"flex items-center justify-between p-4 bg-secondary/50 rounded-lg\">\n                <div className=\"animate-pulse flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-muted rounded-lg\"></div>\n                  <div>\n                    <div className=\"h-4 bg-muted rounded w-20 mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-32 mb-1\"></div>\n                    <div className=\"h-3 bg-muted rounded w-24\"></div>\n                  </div>\n                </div>\n                <div className=\"animate-pulse\">\n                  <div className=\"h-6 bg-muted rounded w-12 mb-2\"></div>\n                  <div className=\"h-3 bg-muted rounded w-16 mb-2\"></div>\n                  <div className=\"h-2 bg-muted rounded w-16\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border shadow-sm\">\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-lg font-semibold text-foreground\">Live Bus Status</h2>\n          <button className=\"text-sm text-primary hover:text-primary/80\" data-testid=\"button-refresh-buses\">\n            <i className=\"fas fa-sync-alt mr-1\"></i>\n            Refresh\n          </button>\n        </div>\n      </div>\n      <div className=\"p-6\">\n        <div className=\"space-y-4\">\n          {buses.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <i className=\"fas fa-bus text-4xl mb-4 opacity-50\"></i>\n              <p>No active buses found</p>\n            </div>\n          ) : (\n            buses.slice(0, 6).map((bus, index) => {\n              const statusInfo = getStatusInfo(bus);\n              const iconColor = getBusIconColor(index);\n              \n              return (\n                <div key={bus.id} className=\"flex items-center justify-between p-4 bg-secondary/50 rounded-lg\" data-testid={`card-bus-${bus.id}`}>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className={`w-12 h-12 ${iconColor} rounded-lg flex items-center justify-center`}>\n                      <i className=\"fas fa-bus text-white\"></i>\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium text-foreground\" data-testid={`text-bus-id-${bus.id}`}>Bus #{bus.busNumber}</h3>\n                      <p className=\"text-sm text-muted-foreground\" data-testid={`text-bus-route-${bus.id}`}>{bus.route}</p>\n                      <div className=\"flex items-center mt-1\">\n                        <span className={`status-indicator ${statusInfo.indicator} mr-2`}></span>\n                        <span className=\"text-xs text-muted-foreground\">{statusInfo.label}</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-lg font-bold text-foreground\" data-testid={`text-bus-passengers-${bus.id}`}>\n                      {bus.currentPassengers}/{bus.capacity}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">passengers</div>\n                    <div className=\"w-16 bg-muted rounded-full h-2 mt-2\">\n                      <div \n                        className={`${statusInfo.barColor} h-2 rounded-full transition-all duration-300`} \n                        style={{ width: `${Math.min(statusInfo.barWidth, 100)}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                </div>\n              );\n            })\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5817},"client/src/components/dispatch-table.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport type { Bus } from \"@shared/schema\";\n\ninterface DispatchTableProps {\n  buses: Bus[];\n  isLoading: boolean;\n}\n\nexport default function DispatchTable({ buses, isLoading }: DispatchTableProps) {\n  const getStatusBadge = (bus: Bus) => {\n    const occupancyPercent = Math.round((bus.currentPassengers / bus.capacity) * 100);\n    \n    if (bus.status === 'over_capacity' || bus.currentPassengers > bus.capacity) {\n      return {\n        label: 'Over Capacity',\n        className: 'bg-destructive/10 text-destructive',\n        indicator: 'status-offline',\n        barColor: 'bg-destructive',\n        barWidth: Math.min(occupancyPercent, 120),\n      };\n    } else if (bus.status === 'near_capacity' || bus.currentPassengers >= bus.alertThreshold) {\n      return {\n        label: 'Near Capacity',\n        className: 'bg-orange-500/10 text-orange-600',\n        indicator: 'status-warning',\n        barColor: 'bg-orange-500',\n        barWidth: occupancyPercent,\n      };\n    } else if (bus.status === 'maintenance') {\n      return {\n        label: 'Maintenance',\n        className: 'bg-muted/10 text-muted-foreground',\n        indicator: 'status-offline',\n        barColor: 'bg-muted',\n        barWidth: 0,\n      };\n    } else {\n      return {\n        label: 'Normal',\n        className: 'bg-chart-2/10 text-chart-2',\n        indicator: 'status-online',\n        barColor: 'bg-chart-2',\n        barWidth: occupancyPercent,\n      };\n    }\n  };\n\n  const getBusIconColor = (index: number) => {\n    const colors = ['bg-primary', 'bg-chart-2', 'bg-chart-1', 'bg-chart-3'];\n    return colors[index % colors.length];\n  };\n\n  const getLastUpdateText = (lastUpdate: Date | string | null) => {\n    if (!lastUpdate) return \"Never\";\n    \n    const now = new Date();\n    const updateDate = typeof lastUpdate === 'string' ? new Date(lastUpdate) : lastUpdate;\n    const diffMs = now.getTime() - updateDate.getTime();\n    const diffSec = Math.floor(diffMs / 1000);\n    const diffMin = Math.floor(diffSec / 60);\n    \n    if (diffSec < 60) return `${diffSec}sec ago`;\n    if (diffMin < 60) return `${diffMin}min ago`;\n    return `${Math.floor(diffMin / 60)}h ago`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card rounded-lg border border-border shadow-sm mb-8\">\n        <div className=\"p-6 border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-semibold text-foreground\">Dispatch Control</h2>\n            <div className=\"flex space-x-2\">\n              <Button data-testid=\"button-add-bus\">\n                <i className=\"fas fa-plus mr-2\"></i>\n                Add Bus\n              </Button>\n              <Button variant=\"outline\" data-testid=\"button-export-data\">\n                <i className=\"fas fa-download mr-2\"></i>\n                Export\n              </Button>\n            </div>\n          </div>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"border-b border-border\">\n                <tr>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Bus ID</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Route</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Status</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Passengers</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Location</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Last Update</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Actions</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-border\">\n                {[1, 2, 3].map((i) => (\n                  <tr key={i} className=\"hover:bg-accent/50\">\n                    <td className=\"py-3 px-4\">\n                      <div className=\"animate-pulse flex items-center space-x-2\">\n                        <div className=\"w-8 h-8 bg-muted rounded\"></div>\n                        <div className=\"h-4 bg-muted rounded w-16\"></div>\n                      </div>\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <div className=\"animate-pulse h-4 bg-muted rounded w-24\"></div>\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <div className=\"animate-pulse h-6 bg-muted rounded w-20\"></div>\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <div className=\"animate-pulse flex items-center space-x-2\">\n                        <div className=\"h-4 bg-muted rounded w-12\"></div>\n                        <div className=\"w-16 h-2 bg-muted rounded\"></div>\n                      </div>\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <div className=\"animate-pulse h-4 bg-muted rounded w-20\"></div>\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <div className=\"animate-pulse h-4 bg-muted rounded w-16\"></div>\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <div className=\"animate-pulse flex space-x-2\">\n                        <div className=\"w-6 h-6 bg-muted rounded\"></div>\n                        <div className=\"w-6 h-6 bg-muted rounded\"></div>\n                        <div className=\"w-6 h-6 bg-muted rounded\"></div>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border shadow-sm mb-8\">\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-lg font-semibold text-foreground\">Dispatch Control</h2>\n          <div className=\"flex space-x-2\">\n            <Button data-testid=\"button-add-bus\">\n              <i className=\"fas fa-plus mr-2\"></i>\n              Add Bus\n            </Button>\n            <Button variant=\"outline\" data-testid=\"button-export-data\">\n              <i className=\"fas fa-download mr-2\"></i>\n              Export\n            </Button>\n          </div>\n        </div>\n      </div>\n      <div className=\"p-6\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"border-b border-border\">\n              <tr>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Bus ID</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Route</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Status</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Passengers</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Location</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Last Update</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Actions</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-border\">\n              {buses.length === 0 ? (\n                <tr>\n                  <td colSpan={7} className=\"py-8 text-center text-muted-foreground\">\n                    <i className=\"fas fa-bus text-4xl mb-4 opacity-50\"></i>\n                    <p>No buses available</p>\n                  </td>\n                </tr>\n              ) : (\n                buses.map((bus, index) => {\n                  const statusInfo = getStatusBadge(bus);\n                  const iconColor = getBusIconColor(index);\n                  \n                  return (\n                    <tr key={bus.id} className=\"hover:bg-accent/50\" data-testid={`row-bus-${bus.id}`}>\n                      <td className=\"py-3 px-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <div className={`w-8 h-8 ${iconColor} rounded flex items-center justify-center`}>\n                            <span className=\"text-xs font-bold text-white\">{bus.busNumber}</span>\n                          </div>\n                          <span className=\"font-medium\" data-testid={`text-bus-id-${bus.id}`}>{bus.id}</span>\n                        </div>\n                      </td>\n                      <td className=\"py-3 px-4 text-sm\" data-testid={`text-bus-route-${bus.id}`}>{bus.route}</td>\n                      <td className=\"py-3 px-4\">\n                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${statusInfo.className}`}>\n                          <span className={`status-indicator ${statusInfo.indicator} mr-1`}></span>\n                          {statusInfo.label}\n                        </span>\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"font-medium\" data-testid={`text-bus-occupancy-${bus.id}`}>\n                            {bus.currentPassengers}/{bus.capacity}\n                          </span>\n                          <div className=\"w-16 bg-muted rounded-full h-2\">\n                            <div \n                              className={`${statusInfo.barColor} h-2 rounded-full transition-all duration-300`} \n                              style={{ width: `${Math.min(statusInfo.barWidth, 100)}%` }}\n                            ></div>\n                          </div>\n                        </div>\n                      </td>\n                      <td className=\"py-3 px-4 text-sm text-muted-foreground\" data-testid={`text-bus-location-${bus.id}`}>\n                        {bus.location || \"Unknown\"}\n                      </td>\n                      <td className=\"py-3 px-4 text-sm text-muted-foreground\" data-testid={`text-bus-update-${bus.id}`}>\n                        {getLastUpdateText(bus.lastUpdate)}\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <div className=\"flex space-x-2\">\n                          <button className=\"text-primary hover:text-primary/80\" data-testid={`button-view-${bus.id}`}>\n                            <i className=\"fas fa-eye\"></i>\n                          </button>\n                          <button className=\"text-muted-foreground hover:text-foreground\" data-testid={`button-edit-${bus.id}`}>\n                            <i className=\"fas fa-edit\"></i>\n                          </button>\n                          <button \n                            className={`text-muted-foreground hover:text-destructive ${\n                              statusInfo.label === 'Over Capacity' ? 'text-destructive' : ''\n                            }`} \n                            data-testid={`button-alert-${bus.id}`}\n                          >\n                            <i className=\"fas fa-exclamation-triangle\"></i>\n                          </button>\n                        </div>\n                      </td>\n                    </tr>\n                  );\n                })\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11730},"client/src/components/metrics-cards.tsx":{"content":"interface MetricsCardsProps {\n  stats?: {\n    totalPassengers: number;\n    activeBuses: number;\n    activeBusesRunning: number;\n    averageOccupancy: number;\n    criticalAlerts: number;\n    totalAlerts: number;\n  };\n  isLoading: boolean;\n}\n\nexport default function MetricsCards({ stats, isLoading }: MetricsCardsProps) {\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {[1, 2, 3, 4].map((i) => (\n          <div key={i} className=\"bg-card p-6 rounded-lg border border-border shadow-sm\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n              <div className=\"h-8 bg-muted rounded w-1/2 mb-2\"></div>\n              <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  const metrics = [\n    {\n      label: \"Total Passengers\",\n      value: stats?.totalPassengers || 0,\n      icon: \"fas fa-users\",\n      color: \"text-primary\",\n      change: \"+12% from yesterday\",\n      changeColor: \"text-chart-1\",\n      changeIcon: \"fas fa-arrow-up\",\n    },\n    {\n      label: \"Active Buses\",\n      value: stats?.activeBuses || 0,\n      icon: \"fas fa-bus\",\n      color: \"text-chart-2\",\n      change: `${stats?.activeBusesRunning || 0} running`,\n      changeColor: \"text-muted-foreground\",\n    },\n    {\n      label: \"Average Occupancy\",\n      value: `${stats?.averageOccupancy || 0}%`,\n      icon: \"fas fa-percentage\",\n      color: \"text-chart-3\",\n      change: \"Peak hours: 85%\",\n      changeColor: \"text-chart-4\",\n    },\n    {\n      label: \"Critical Alerts\",\n      value: stats?.criticalAlerts || 0,\n      icon: \"fas fa-exclamation-triangle\",\n      color: \"text-destructive\",\n      change: \"Requires immediate attention\",\n      changeColor: \"text-destructive\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {metrics.map((metric, index) => (\n        <div \n          key={index} \n          className=\"bg-card p-6 rounded-lg border border-border shadow-sm\"\n          data-testid={`card-metric-${metric.label.toLowerCase().replace(/\\s+/g, '-')}`}\n        >\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium text-muted-foreground\">{metric.label}</span>\n            <i className={`${metric.icon} ${metric.color}`}></i>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\" data-testid={`text-${metric.label.toLowerCase().replace(/\\s+/g, '-')}`}>\n            {metric.value}\n          </div>\n          <div className=\"flex items-center mt-2\">\n            <span className={`text-xs ${metric.changeColor} flex items-center`}>\n              {metric.changeIcon && <i className={`${metric.changeIcon} mr-1`}></i>}\n              {metric.change}\n            </span>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2965},"client/src/components/station-activity-card.tsx":{"content":"import type { Station } from \"@shared/schema\";\n\ninterface StationActivityCardProps {\n  stations: Station[];\n  isLoading: boolean;\n}\n\nexport default function StationActivityCard({ stations, isLoading }: StationActivityCardProps) {\n  if (isLoading) {\n    return (\n      <div className=\"bg-card rounded-lg border border-border shadow-sm\">\n        <div className=\"p-6 border-b border-border\">\n          <h2 className=\"text-lg font-semibold text-foreground\">Station Activity</h2>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"flex items-center justify-between p-4 bg-accent/50 rounded-lg\">\n                <div className=\"animate-pulse flex items-center space-x-4\">\n                  <div className=\"w-10 h-10 bg-muted rounded-lg\"></div>\n                  <div>\n                    <div className=\"h-4 bg-muted rounded w-24 mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-32\"></div>\n                  </div>\n                </div>\n                <div className=\"animate-pulse text-right\">\n                  <div className=\"h-4 bg-muted rounded w-16 mb-2\"></div>\n                  <div className=\"h-3 bg-muted rounded w-20\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const getWaitingColor = (waiting: number) => {\n    if (waiting > 20) return \"text-destructive\";\n    if (waiting > 10) return \"text-orange-500\";\n    return \"text-chart-2\";\n  };\n\n  const getLastUpdateText = (lastUpdate: Date | string | null) => {\n    if (!lastUpdate) return \"Never updated\";\n    \n    const now = new Date();\n    const updateDate = typeof lastUpdate === 'string' ? new Date(lastUpdate) : lastUpdate;\n    const diffMs = now.getTime() - updateDate.getTime();\n    const diffSec = Math.floor(diffMs / 1000);\n    const diffMin = Math.floor(diffSec / 60);\n    \n    if (diffSec < 60) return `${diffSec}sec ago`;\n    if (diffMin < 60) return `${diffMin}min ago`;\n    return `${Math.floor(diffMin / 60)}h ago`;\n  };\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border shadow-sm\">\n      <div className=\"p-6 border-b border-border\">\n        <h2 className=\"text-lg font-semibold text-foreground\">Station Activity</h2>\n      </div>\n      <div className=\"p-6\">\n        <div className=\"space-y-4\">\n          {stations.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <i className=\"fas fa-map-marker-alt text-4xl mb-4 opacity-50\"></i>\n              <p>No active stations found</p>\n            </div>\n          ) : (\n            stations.map((station) => (\n              <div key={station.id} className=\"flex items-center justify-between p-4 bg-accent/50 rounded-lg\" data-testid={`card-station-${station.id}`}>\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-10 h-10 bg-secondary rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-map-marker-alt text-primary\"></i>\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium text-foreground\" data-testid={`text-station-name-${station.id}`}>{station.name}</h3>\n                    <p className=\"text-sm text-muted-foreground\" data-testid={`text-station-location-${station.id}`}>{station.location}</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-sm font-medium text-foreground\">\n                    <span className={getWaitingColor(station.waitingPassengers)} data-testid={`text-station-waiting-${station.id}`}>\n                      {station.waitingPassengers}\n                    </span> waiting\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\" data-testid={`text-station-update-${station.id}`}>\n                    Last update: {getLastUpdateText(station.lastUpdate)}\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4161},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.ts":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport interface WebSocketMessage {\n  type: string;\n  data: any;\n}\n\nexport function useWebSocket() {\n  const [isConnected, setIsConnected] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  const connect = () => {\n    try {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      \n      wsRef.current = new WebSocket(wsUrl);\n\n      wsRef.current.onopen = () => {\n        console.log(\"WebSocket connected\");\n        setIsConnected(true);\n        setError(null);\n        reconnectAttempts.current = 0;\n      };\n\n      wsRef.current.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          handleMessage(message);\n        } catch (err) {\n          console.error(\"Failed to parse WebSocket message:\", err);\n        }\n      };\n\n      wsRef.current.onclose = () => {\n        console.log(\"WebSocket disconnected\");\n        setIsConnected(false);\n        \n        // Attempt reconnection\n        if (reconnectAttempts.current < maxReconnectAttempts) {\n          const delay = Math.pow(2, reconnectAttempts.current) * 1000; // Exponential backoff\n          reconnectTimeoutRef.current = setTimeout(() => {\n            reconnectAttempts.current++;\n            connect();\n          }, delay);\n        } else {\n          setError(\"Failed to reconnect to server\");\n        }\n      };\n\n      wsRef.current.onerror = (error) => {\n        console.error(\"WebSocket error:\", error);\n        setError(\"WebSocket connection error\");\n      };\n    } catch (err) {\n      console.error(\"Failed to create WebSocket connection:\", err);\n      setError(\"Failed to connect to server\");\n    }\n  };\n\n  const handleMessage = (message: WebSocketMessage) => {\n    switch (message.type) {\n      case 'passenger_count_updated':\n        // Invalidate bus data to trigger refetch\n        queryClient.invalidateQueries({ queryKey: ['/api/buses'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/buses/active'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n        // Invalidate alert data since alerts can be created during passenger count updates\n        queryClient.invalidateQueries({ queryKey: ['/api/alerts'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/alerts/unread'] });\n        break;\n      \n      case 'bus_created':\n        queryClient.invalidateQueries({ queryKey: ['/api/buses'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/buses/active'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n        break;\n      \n      case 'station_created':\n        queryClient.invalidateQueries({ queryKey: ['/api/stations'] });\n        break;\n      \n      case 'alert_marked_read':\n        queryClient.invalidateQueries({ queryKey: ['/api/alerts'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n        break;\n      \n      default:\n        console.log(\"Unknown message type:\", message.type);\n    }\n  };\n\n  const disconnect = () => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n    }\n    \n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    \n    setIsConnected(false);\n  };\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      disconnect();\n    };\n  }, []);\n\n  return {\n    isConnected,\n    error,\n    reconnect: connect,\n    disconnect,\n  };\n}\n","size_bytes":3819},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { useState, useEffect } from \"react\";\nimport MetricsCards from \"@/components/metrics-cards\";\nimport BusStatusCard from \"@/components/bus-status-card\";\nimport StationActivityCard from \"@/components/station-activity-card\";\nimport DispatchTable from \"@/components/dispatch-table\";\nimport ActivityLog from \"@/components/activity-log\";\nimport AlertModal from \"@/components/alert-modal\";\nimport type { Bus, Station, Alert, ActivityLog as ActivityLogType } from \"@shared/schema\";\n\ninterface DashboardStats {\n  totalPassengers: number;\n  activeBuses: number;\n  activeBusesRunning: number;\n  averageOccupancy: number;\n  criticalAlerts: number;\n  totalAlerts: number;\n  activeStations: number;\n}\n\nexport default function Dashboard() {\n  const [currentTime, setCurrentTime] = useState(new Date().toLocaleTimeString('en-US', { hour12: true }));\n  const [selectedAlert, setSelectedAlert] = useState<Alert | null>(null);\n  const { isConnected } = useWebSocket();\n\n  // Queries\n  const { data: buses = [], isLoading: busesLoading } = useQuery<Bus[]>({\n    queryKey: ['/api/buses/active'],\n  });\n\n  const { data: stations = [], isLoading: stationsLoading } = useQuery<Station[]>({\n    queryKey: ['/api/stations/active'],\n  });\n\n  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: ['/api/dashboard/stats'],\n  });\n\n  const { data: alerts = [] } = useQuery<Alert[]>({\n    queryKey: ['/api/alerts/unread'],\n  });\n\n  const { data: activities = [] } = useQuery<ActivityLogType[]>({\n    queryKey: ['/api/activity'],\n    queryFn: async () => {\n      const response = await fetch('/api/activity?limit=10');\n      if (!response.ok) throw new Error('Failed to fetch activities');\n      return response.json();\n    },\n  });\n\n  // Update time every second\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date().toLocaleTimeString('en-US', { hour12: true }));\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const criticalAlerts = alerts.filter(alert => alert.severity === 'critical');\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border shadow-sm fixed w-full top-0 z-50\">\n        <div className=\"px-6 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <h1 className=\"text-xl font-bold text-foreground\">\n              <i className=\"fas fa-bus mr-2 text-primary\"></i>\n              Bus Monitoring System\n            </h1>\n            <div className=\"flex items-center space-x-2\">\n              <span className={`status-indicator ${isConnected ? 'status-online pulse' : 'status-offline'}`}></span>\n              <span className=\"text-sm text-muted-foreground\">\n                {isConnected ? 'Connected' : 'Disconnected'}\n              </span>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2 bg-secondary px-3 py-1 rounded-md\">\n              <i className=\"fas fa-clock text-primary text-sm\"></i>\n              <span className=\"text-sm font-mono\" data-testid=\"current-time\">{currentTime}</span>\n            </div>\n            \n            <button \n              className=\"relative p-2 text-muted-foreground hover:text-foreground transition-colors\"\n              onClick={() => criticalAlerts.length > 0 && setSelectedAlert(criticalAlerts[0])}\n              data-testid=\"button-alerts\"\n            >\n              <i className=\"fas fa-bell\"></i>\n              {alerts.length > 0 && (\n                <span className=\"absolute -top-1 -right-1 bg-destructive text-destructive-foreground text-xs rounded-full w-5 h-5 flex items-center justify-center\">\n                  {alerts.length}\n                </span>\n              )}\n            </button>\n            \n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                <i className=\"fas fa-user text-primary-foreground text-sm\"></i>\n              </div>\n              <span className=\"text-sm font-medium\">Admin User</span>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"flex pt-16\">\n        {/* Sidebar */}\n        <aside className=\"w-64 bg-card border-r border-border h-screen fixed left-0 top-16 overflow-y-auto\">\n          <nav className=\"p-4 space-y-2\">\n            <a href=\"#dashboard\" className=\"flex items-center space-x-3 px-3 py-2 bg-primary text-primary-foreground rounded-md\" data-testid=\"nav-dashboard\">\n              <i className=\"fas fa-tachometer-alt\"></i>\n              <span>Dashboard</span>\n            </a>\n            <a href=\"#buses\" className=\"flex items-center space-x-3 px-3 py-2 text-muted-foreground hover:bg-accent hover:text-accent-foreground rounded-md transition-colors\" data-testid=\"nav-buses\">\n              <i className=\"fas fa-bus\"></i>\n              <span>Bus Management</span>\n            </a>\n            <a href=\"#stations\" className=\"flex items-center space-x-3 px-3 py-2 text-muted-foreground hover:bg-accent hover:text-accent-foreground rounded-md transition-colors\" data-testid=\"nav-stations\">\n              <i className=\"fas fa-map-marker-alt\"></i>\n              <span>Stations</span>\n            </a>\n            <a href=\"#dispatch\" className=\"flex items-center space-x-3 px-3 py-2 text-muted-foreground hover:bg-accent hover:text-accent-foreground rounded-md transition-colors\" data-testid=\"nav-dispatch\">\n              <i className=\"fas fa-route\"></i>\n              <span>Dispatch</span>\n            </a>\n            <a href=\"#alerts\" className=\"flex items-center space-x-3 px-3 py-2 text-muted-foreground hover:bg-accent hover:text-accent-foreground rounded-md transition-colors\" data-testid=\"nav-alerts\">\n              <i className=\"fas fa-exclamation-triangle\"></i>\n              <span>Alerts</span>\n            </a>\n            <a href=\"#settings\" className=\"flex items-center space-x-3 px-3 py-2 text-muted-foreground hover:bg-accent hover:text-accent-foreground rounded-md transition-colors\" data-testid=\"nav-settings\">\n              <i className=\"fas fa-cog\"></i>\n              <span>Settings</span>\n            </a>\n          </nav>\n\n          {/* Quick Stats */}\n          <div className=\"p-4 border-t border-border\">\n            <h3 className=\"text-sm font-medium text-muted-foreground mb-3\">System Overview</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Active Buses</span>\n                <span className=\"font-bold text-chart-1\" data-testid=\"text-active-buses\">\n                  {statsLoading ? '...' : stats?.activeBuses || 0}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Total Passengers</span>\n                <span className=\"font-bold text-chart-2\" data-testid=\"text-total-passengers\">\n                  {statsLoading ? '...' : stats?.totalPassengers || 0}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Alerts</span>\n                <span className=\"font-bold text-destructive\" data-testid=\"text-alerts-count\">\n                  {alerts.length}\n                </span>\n              </div>\n            </div>\n          </div>\n        </aside>\n\n        {/* Main Content */}\n        <main className=\"flex-1 ml-64 p-6 bg-background\">\n          {/* Alert Banner */}\n          {criticalAlerts.length > 0 && (\n            <div className=\"mb-6 bg-destructive/10 border border-destructive/20 rounded-lg p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <i className=\"fas fa-exclamation-triangle text-destructive\"></i>\n                <span className=\"font-medium text-destructive\">System Alert:</span>\n                <span className=\"text-destructive\">{criticalAlerts[0].message}</span>\n                <button \n                  className=\"ml-auto text-destructive hover:text-destructive/80\"\n                  onClick={() => setSelectedAlert(criticalAlerts[0])}\n                  data-testid=\"button-view-alert\"\n                >\n                  <i className=\"fas fa-eye\"></i>\n                </button>\n              </div>\n            </div>\n          )}\n\n          {/* Key Metrics Cards */}\n          <MetricsCards stats={stats} isLoading={statsLoading} />\n\n          {/* Real-time Bus Status Grid */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n            <BusStatusCard buses={buses} isLoading={busesLoading} />\n            <StationActivityCard stations={stations} isLoading={stationsLoading} />\n          </div>\n\n          {/* Dispatch Interface */}\n          <DispatchTable buses={buses} isLoading={busesLoading} />\n\n          {/* Recent Activity Log */}\n          <ActivityLog activities={activities} />\n        </main>\n      </div>\n\n      {/* Alert Modal */}\n      {selectedAlert && (\n        <AlertModal\n          alert={selectedAlert}\n          onClose={() => setSelectedAlert(null)}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":9495},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}